
module DualPortMem #(T, int SIZE) {
	state T[SIZE] mem
	CrossDomain #(T: type T[SIZE]) cross_mem
	cross_mem.in = mem

	domain write_clk
	action write'0 : int#(FROM: 0, TO: SIZE) addr'0, T data'0 {
		mem[addr] = data
	}

	domain read_clk
	action read'0: int#(FROM: 0, TO: SIZE)  read_addr'0 -> T read_data'0 {
		read_data = cross_mem.out[read_addr]
	}
}

module FIFO #(
	T,
	int DEPTH,
	// The FIFO may still receive data for several cycles after ready is de-asserted
	int READY_SLACK
) {
	state T[DEPTH] mem
	state int#(FROM: 0, TO: DEPTH) read_addr
	state int#(FROM: 0, TO: DEPTH) write_addr

	initial read_addr = 0
	initial write_addr = 0
	
	CrossDomain write_to_pop
	write_to_pop.in = write_addr

	CrossDomain read_to_push
	read_to_push.in = read_addr

	CrossDomain mem_to_pop
	mem_to_pop.in = mem

	domain push_clk
	output bool ready'0
	action push'READY_SLACK: T data_in'READY_SLACK {
		mem[write_addr] = data_in
		write_addr = (write_addr + 1) % DEPTH
	}

	domain pop_clk
	action pop: -> bool data_valid, T data_out {
		data_valid = read_addr != write_to_pop.out
		when data_valid {
			// Add a pipelining register, because it can usually be fitted to the 
			reg data_out = mem_to_pop.out[read_addr]
			read_addr = (read_addr + 1) % DEPTH
		}
	}
	
	// Wrapping subtract
	int space_remaining = (read_to_push.out - write_addr) % DEPTH
	gen int ALMOST_FULL_TRESHOLD = READY_SLACK + 1 // +1 for the latency reg we introduce here
	reg bool r = space_remaining >  ALMOST_FULL_TRESHOLD
	ready = LatencyOffset #(OFFSET: -ALMOST_FULL_TRESHOLD)(r)
}

module JoinDomains #(T1, T2, int OFFSET) {
	interface identity1 : T1 i1'0 -> T1 o1'0
	interface identity2 : T2 i2'OFFSET -> T2 o2'OFFSET

	o1 = i1
	o2 = i2
}

module SlowClockGenerator #(int PERIOD) {
	interface SlowClockGenerator : -> state int cur_value
	
	initial cur_value = 0

	when cur_value == PERIOD-1 {
		cur_value = 0
	} else {
		cur_value = cur_value + 1
	}
}

module Abs #(int TO) {
	interface Abs : int #(FROM: -TO+1, TO) a -> int #(FROM: 0, TO) o

	when a < 0 {
		o = unsafe_int_cast#(FROM: 0, TO)(-a)
	} else {
		o = unsafe_int_cast#(FROM: 0, TO)(a)
	}
}

/// Concatenate two arrays, such that the elements of b come after the elements of a
module Concat #(T, int SIZE_A, int SIZE_B) {
	interface Concat : T[SIZE_A] a, T[SIZE_B] b -> T[SIZE_A + SIZE_B] result

	result[:SIZE_A] = a
	result[SIZE_A:] = b
}

/// Concatenate two arrays, such that the elements of b come after the elements of a
module Repeat #(T, int SIZE) {
	interface Repeat : T v -> T[SIZE] result

	for int I in 0..SIZE {
		result[I] = v
	}
}

module BitSelect #(int SIZE) {
	interface BitSelect : int#(FROM: 0, TO: SIZE - 1) selection -> bool[SIZE] bits

	for int I in 0..SIZE {
		bits[I] = false
	}

	bits[selection] = true
}

module PopCount #(int WIDTH) {
	// Should be chosen based on what's most efficient for the target architecture
	gen int BASE_CASE_SIZE = 5

	interface PopCount : bool[WIDTH] bits'0 -> int#(FROM: 0, TO: WIDTH+1) popcount

	if WIDTH == 0 {
		int zero'0 = 0
		popcount = zero
	} else if WIDTH <= BASE_CASE_SIZE {
		int[WIDTH] cvt
		for int I in 0..WIDTH {
			when bits[I] {
				cvt[I] = 1
			} else {
				cvt[I] = 0
			}
		}
		if WIDTH == 1 {
			popcount = cvt[0]
		} else if WIDTH == 2 {
			popcount = cvt[0] + cvt[1]
		} else if WIDTH == 3 {
			popcount = cvt[0] + cvt[1] + cvt[2]
		} else if WIDTH == 4 {
			popcount = cvt[0] + cvt[1] + cvt[2] + cvt[3]
		} else if WIDTH == 5 {
			popcount = cvt[0] + cvt[1] + cvt[2] + cvt[3]  + cvt[4]
		} else {
			assert#(C: false)
		}
	} else {
		reg reg popcount = PopCount(bits[:WIDTH / 2]) + PopCount(bits[WIDTH / 2:])
	}
}


// Recursive Tree Add module recurses smaller copies of itself. 
module TreeAdd #(int WIDTH, int FROM, int TO) {
	interface TreeAdd : int#(FROM, TO)[WIDTH] values'0 -> int#(FROM: FROM*WIDTH, TO: (TO - 1)*WIDTH + 1) total

	if WIDTH == 0 {
		// Have to explicitly give zero a latency count. 
		// Otherwise total's latency can't be determined. 
		int zero'0 = 0
		total = zero
	} else if WIDTH == 1 {
		total = values[0]
	} else {
		// Or instantiate submodules inline
		int left_total = TreeAdd(values[:WIDTH / 2])
		int right_total = TreeAdd(values[WIDTH / 2:])
		
		// Can add pipelining registers here too. 
		// Latency Counting will figure it out.
		reg total = left_total + right_total
	}
}
