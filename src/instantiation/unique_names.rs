use std::collections::HashMap;

/// Generates ascending IDs for locals, while keeping the name information as much as possible.
///
/// For example, when generating multiple names for the string "beep" it returns:
/// - beep
/// - beep_2
/// - beep_3
/// - ...
pub struct UniqueNames {
    name_map: HashMap<String, i64>,
}

/// Many thanks to "SystemVerilog for Design Second Edition" by Stuart Sutherland, Simon Davidmann, Peter Flake
const RESERVED_KEYWORDS: &[&str] = &[
    // I'm commonly using "" for temporaries, register it so all uses become "_1", "_2"...
    "",
    // Verilog-1995
    "always",
    "and",
    "assign",
    "begin",
    "buf",
    "bufif0",
    "bufif1",
    "case",
    "casex",
    "casez",
    "cmos",
    "deassign",
    "default",
    "defparam",
    "disable",
    "edge",
    "else",
    "end",
    "endcase",
    "endmodule",
    "endfunction",
    "endprimitive",
    "endspecify",
    "endtable",
    "endtask",
    "event",
    "for",
    "force",
    "forever",
    "fork",
    "function",
    "highz0",
    "highz1",
    "if",
    "ifnone",
    "initial",
    "inout",
    "input",
    "integer",
    "join",
    "large",
    "macromodule",
    "medium",
    "module",
    "nand",
    "negedge",
    "nmos",
    "nor",
    "not",
    "notif0",
    "notif1",
    "or",
    "output",
    "parameter",
    "pmos",
    "posedge",
    "primitive",
    "pull0",
    "pull1",
    "pullup",
    "pulldown",
    "rcmos",
    "real",
    "realtime",
    "reg",
    "release",
    "repeat",
    "rnmos",
    "rpmos",
    "rtran",
    "rtranif0",
    "rtranif1",
    "scalared",
    "small",
    "specify",
    "specparam",
    "strong0",
    "strong1",
    "supply0",
    "supply1",
    "table",
    "task",
    "time",
    "tran",
    "tranif0",
    "tranif1",
    "tri",
    "tri0",
    "tri1",
    "triand",
    "trior",
    "trireg",
    "vectored",
    "wait",
    "wand",
    "weak0",
    "weak1",
    "while",
    "wire",
    "wor",
    "xnor",
    "xor",
    // Verilog-2001
    "automatic",
    "cell",
    "config",
    "design",
    "endconfig",
    "endgenerate",
    "generate",
    "genvar",
    "incdir",
    "include",
    "instance",
    "liblist",
    "library",
    "localparam",
    "noshowcancelled",
    "pulsestyle_onevent",
    "pulsestyle_ondetect",
    "showcancelled",
    "signed",
    "unsigned",
    "use",
    // Verilog-2005
    "uwire",
    // SystemVerilog-2005
    "alias",
    "always_comb",
    "always_ff",
    "always_latch",
    "assert",
    "assume",
    "before",
    "bind",
    "bins",
    "binsof",
    "bit",
    "break",
    "byte",
    "chandle",
    "class",
    "clocking",
    "const",
    "constraint",
    "context",
    "continue",
    "cover",
    "covergroup",
    "coverpoint",
    "cross",
    "dist",
    "do",
    "endclass",
    "endclocking",
    "endgroup",
    "endinterface",
    "endpackage",
    "endprimitive",
    "endprogram",
    "endproperty",
    "endsequence",
    "enum",
    "expect",
    "export",
    "extends",
    "extern",
    "final",
    "first_match",
    "foreach",
    "forkjoin",
    "iff",
    "ignore_bins",
    "illegal_bins",
    "import",
    "inside",
    "int",
    "interface",
    "intersect",
    "join_any",
    "join_none",
    "local",
    "logic",
    "longint",
    "matches",
    "modport",
    "new",
    "null",
    "package",
    "packed",
    "priority",
    "program",
    "property",
    "protected",
    "pure",
    "rand",
    "randc",
    "randcase",
    "randsequence",
    "ref",
    "return",
    "sequence",
    "shortint",
    "shortreal",
    "solve",
    "static",
    "string",
    "struct",
    "super",
    "tagged",
    "this",
    "throughout",
    "timeprecision",
    "timeunit",
    "type",
    "typedef",
    "union",
    "unique",
    "var",
    "virtual",
    "void",
    "wait_order",
    "wildcard",
    "with",
    "within",
];
impl UniqueNames {
    pub fn new() -> Self {
        let mut name_map: HashMap<String, i64> = HashMap::new();
        for reserved in RESERVED_KEYWORDS {
            name_map.insert(reserved.to_string(), 1);
        }
        Self { name_map }
    }
    pub fn get_unique_name<S: Into<String> + AsRef<str>>(&mut self, name: S) -> String {
        let name_ref = name.as_ref();
        if let Some(found_id) = self.name_map.get_mut(name_ref) {
            let result = format!("{name_ref}_{found_id}");
            *found_id += 1;
            result
        } else {
            let result: String = name.into();
            self.name_map.insert(result.clone(), 2);
            result
        }
    }
}
