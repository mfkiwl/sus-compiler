Error: Template arguments must be known at compile-time!
    ╭─[ core.sus:18:38 ]
    │
 18 │     interface IntToBits : int #(MIN: -pow2(E: NUM_BITS - 1), MAX: pow2(E: NUM_BITS - 1) - 1) value'0 -> bool[NUM_BITS] bits'0
    │                                      ───────────┬──────────  
    │                                                 ╰──────────── Template arguments must be known at compile-time!
────╯
Error: Function call syntax is only possible on modules or interfaces of modules
    ╭─[ core.sus:18:39 ]
    │
 18 │     interface IntToBits : int #(MIN: -pow2(E: NUM_BITS - 1), MAX: pow2(E: NUM_BITS - 1) - 1) value'0 -> bool[NUM_BITS] bits'0
    │                                       ──┬─  
    │                                         ╰─── Function call syntax is only possible on modules or interfaces of modules
────╯
Error: No Global of the name 'E' was found. Did you forget to import it?
    ╭─[ core.sus:18:44 ]
    │
 18 │     interface IntToBits : int #(MIN: -pow2(E: NUM_BITS - 1), MAX: pow2(E: NUM_BITS - 1) - 1) value'0 -> bool[NUM_BITS] bits'0
    │                                            ┬  
    │                                            ╰── No Global of the name 'E' was found. Did you forget to import it?
────╯
Error: While parsing 'binary_op', parser found a syntax error in a node of type 'ERROR'
    ╭─[ core.sus:18:45 ]
    │
 18 │     interface IntToBits : int #(MIN: -pow2(E: NUM_BITS - 1), MAX: pow2(E: NUM_BITS - 1) - 1) value'0 -> bool[NUM_BITS] bits'0
    │                                            ──────┬┬───────  
    │                                                  ╰────────── While parsing 'binary_op', parser found a syntax error in a node of type 'ERROR'
    │                                                   │         
    │                                                   ╰───────── Parent node 'binary_op'
────╯
Error: Function call syntax is only possible on modules or interfaces of modules
    ╭─[ core.sus:18:67 ]
    │
 18 │     interface IntToBits : int #(MIN: -pow2(E: NUM_BITS - 1), MAX: pow2(E: NUM_BITS - 1) - 1) value'0 -> bool[NUM_BITS] bits'0
    │                                                                   ──┬─  
    │                                                                     ╰─── Function call syntax is only possible on modules or interfaces of modules
────╯
Error: Template arguments must be known at compile-time!
    ╭─[ core.sus:18:67 ]
    │
 18 │     interface IntToBits : int #(MIN: -pow2(E: NUM_BITS - 1), MAX: pow2(E: NUM_BITS - 1) - 1) value'0 -> bool[NUM_BITS] bits'0
    │                                                                   ────────────┬────────────  
    │                                                                               ╰────────────── Template arguments must be known at compile-time!
────╯
Error: No Global of the name 'E' was found. Did you forget to import it?
    ╭─[ core.sus:18:72 ]
    │
 18 │     interface IntToBits : int #(MIN: -pow2(E: NUM_BITS - 1), MAX: pow2(E: NUM_BITS - 1) - 1) value'0 -> bool[NUM_BITS] bits'0
    │                                                                        ┬  
    │                                                                        ╰── No Global of the name 'E' was found. Did you forget to import it?
────╯
Error: While parsing 'binary_op', parser found a syntax error in a node of type 'ERROR'
    ╭─[ core.sus:18:73 ]
    │
 18 │     interface IntToBits : int #(MIN: -pow2(E: NUM_BITS - 1), MAX: pow2(E: NUM_BITS - 1) - 1) value'0 -> bool[NUM_BITS] bits'0
    │                                                                        ──────┬┬───────  
    │                                                                              ╰────────── While parsing 'binary_op', parser found a syntax error in a node of type 'ERROR'
    │                                                                               │         
    │                                                                               ╰───────── Parent node 'binary_op'
────╯
Error: Template arguments must be known at compile-time!
    ╭─[ core.sus:22:63 ]
    │
 22 │     interface IntToBits : bool[NUM_BITS] bits'0 -> int #(MIN: -pow2(E: NUM_BITS - 1), MAX: pow2(E: NUM_BITS - 1) - 1) value'0
    │                                                               ───────────┬──────────  
    │                                                                          ╰──────────── Template arguments must be known at compile-time!
────╯
Error: Function call syntax is only possible on modules or interfaces of modules
    ╭─[ core.sus:22:64 ]
    │
 22 │     interface IntToBits : bool[NUM_BITS] bits'0 -> int #(MIN: -pow2(E: NUM_BITS - 1), MAX: pow2(E: NUM_BITS - 1) - 1) value'0
    │                                                                ──┬─  
    │                                                                  ╰─── Function call syntax is only possible on modules or interfaces of modules
────╯
Error: No Global of the name 'E' was found. Did you forget to import it?
    ╭─[ core.sus:22:69 ]
    │
 22 │     interface IntToBits : bool[NUM_BITS] bits'0 -> int #(MIN: -pow2(E: NUM_BITS - 1), MAX: pow2(E: NUM_BITS - 1) - 1) value'0
    │                                                                     ┬  
    │                                                                     ╰── No Global of the name 'E' was found. Did you forget to import it?
────╯
Error: While parsing 'binary_op', parser found a syntax error in a node of type 'ERROR'
    ╭─[ core.sus:22:70 ]
    │
 22 │     interface IntToBits : bool[NUM_BITS] bits'0 -> int #(MIN: -pow2(E: NUM_BITS - 1), MAX: pow2(E: NUM_BITS - 1) - 1) value'0
    │                                                                     ──────┬┬───────  
    │                                                                           ╰────────── While parsing 'binary_op', parser found a syntax error in a node of type 'ERROR'
    │                                                                            │         
    │                                                                            ╰───────── Parent node 'binary_op'
────╯
Error: Function call syntax is only possible on modules or interfaces of modules
    ╭─[ core.sus:22:92 ]
    │
 22 │     interface IntToBits : bool[NUM_BITS] bits'0 -> int #(MIN: -pow2(E: NUM_BITS - 1), MAX: pow2(E: NUM_BITS - 1) - 1) value'0
    │                                                                                            ──┬─  
    │                                                                                              ╰─── Function call syntax is only possible on modules or interfaces of modules
────╯
Error: Template arguments must be known at compile-time!
    ╭─[ core.sus:22:92 ]
    │
 22 │     interface IntToBits : bool[NUM_BITS] bits'0 -> int #(MIN: -pow2(E: NUM_BITS - 1), MAX: pow2(E: NUM_BITS - 1) - 1) value'0
    │                                                                                            ────────────┬────────────  
    │                                                                                                        ╰────────────── Template arguments must be known at compile-time!
────╯
Error: No Global of the name 'E' was found. Did you forget to import it?
    ╭─[ core.sus:22:97 ]
    │
 22 │     interface IntToBits : bool[NUM_BITS] bits'0 -> int #(MIN: -pow2(E: NUM_BITS - 1), MAX: pow2(E: NUM_BITS - 1) - 1) value'0
    │                                                                                                 ┬  
    │                                                                                                 ╰── No Global of the name 'E' was found. Did you forget to import it?
────╯
Error: While parsing 'binary_op', parser found a syntax error in a node of type 'ERROR'
    ╭─[ core.sus:22:98 ]
    │
 22 │     interface IntToBits : bool[NUM_BITS] bits'0 -> int #(MIN: -pow2(E: NUM_BITS - 1), MAX: pow2(E: NUM_BITS - 1) - 1) value'0
    │                                                                                                 ──────┬┬───────  
    │                                                                                                       ╰────────── While parsing 'binary_op', parser found a syntax error in a node of type 'ERROR'
    │                                                                                                        │         
    │                                                                                                        ╰───────── Parent node 'binary_op'
────╯
Error: This compile-time constant contains Unset
   ╭─[ util.sus:4:8 ]
   │
 4 │     state T[SIZE] mem
   │           ─────┬─────  
   │                ╰─────── This compile-time constant contains Unset
───╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
   ╭─[ util.sus:7:34 ]
   │
 7 │     interface write : bool write'0, int addr'0, T data'0
   │                                     ─────┬────  
   │                                          ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
───╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ util.sus:14:19 ]
    │
 14 │     interface read : int read_addr'0 -> T read_data'0
    │                      ───────┬───────  
    │                             ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
    ╭─[ util.sus:73:27 ]
    │
 73 │     interface identity1 : T1 i1'0 -> T1 o1'0
    │                              ─┬  
    │                               ╰── Unused Variable: This variable does not affect the output ports of this module
────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
    ╭─[ util.sus:74:27 ]
    │
 74 │     interface identity2 : T2 i2'OFFSET -> T2 o2'OFFSET
    │                              ─┬  
    │                               ╰── Unused Variable: This variable does not affect the output ports of this module
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[3]
     ╭─[ util.sus:198:22 ]
     │
 198 │     interface TreeAdd : int[WIDTH] values'0 -> int total
     │                         ─────────┬─────────  
     │                                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[3]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[1]
     ╭─[ util.sus:198:22 ]
     │
 198 │     interface TreeAdd : int[WIDTH] values'0 -> int total
     │                         ─────────┬─────────  
     │                                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[1]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[5]
     ╭─[ util.sus:198:22 ]
     │
 198 │     interface TreeAdd : int[WIDTH] values'0 -> int total
     │                         ─────────┬─────────  
     │                                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[5]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[2]
     ╭─[ util.sus:198:22 ]
     │
 198 │     interface TreeAdd : int[WIDTH] values'0 -> int total
     │                         ─────────┬─────────  
     │                                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[2]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ util.sus:198:45 ]
     │
 198 │     interface TreeAdd : int[WIDTH] values'0 -> int total
     │                                                ────┬────  
     │                                                    ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ util.sus:198:45 ]
     │
 198 │     interface TreeAdd : int[WIDTH] values'0 -> int total
     │                                                ────┬────  
     │                                                    ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ util.sus:198:45 ]
     │
 198 │     interface TreeAdd : int[WIDTH] values'0 -> int total
     │                                                ────┬────  
     │                                                    ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ util.sus:198:45 ]
     │
 198 │     interface TreeAdd : int[WIDTH] values'0 -> int total
     │                                                ────┬────  
     │                                                    ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: This port is not strongly connected to the strongly connected port cluster 'values'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
     ╭─[ util.sus:198:49 ]
     │
 198 │     interface TreeAdd : int[WIDTH] values'0 -> int total
     │                                    ───┬──          ──┬──  
     │                                       ╰─────────────────── 'values' declared here
     │                                                      │    
     │                                                      ╰──── This port is not strongly connected to the strongly connected port cluster 'values'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
─────╯
Error: This port is not strongly connected to the strongly connected port cluster 'values'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
     ╭─[ util.sus:198:49 ]
     │
 198 │     interface TreeAdd : int[WIDTH] values'0 -> int total
     │                                    ───┬──          ──┬──  
     │                                       ╰─────────────────── 'values' declared here
     │                                                      │    
     │                                                      ╰──── This port is not strongly connected to the strongly connected port cluster 'values'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
─────╯
Error: This port is not strongly connected to the strongly connected port cluster 'values'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
     ╭─[ util.sus:198:49 ]
     │
 198 │     interface TreeAdd : int[WIDTH] values'0 -> int total
     │                                    ───┬──          ──┬──  
     │                                       ╰─────────────────── 'values' declared here
     │                                                      │    
     │                                                      ╰──── This port is not strongly connected to the strongly connected port cluster 'values'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ util.sus:206:11 ]
     │
 206 │        total = values[0]
     │                ────┬────  
     │                    ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[3]
     ╭─[ util.sus:212:3 ]
     │
 212 │        SplitAt #(SIZE: WIDTH, SPLIT_POINT: L_SZ, T: type int) split
     │        ───────────────────────────┬──────────────────────────  
     │                                   ╰──────────────────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[3]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[1]
     ╭─[ util.sus:212:3 ]
     │
 212 │        SplitAt #(SIZE: WIDTH, SPLIT_POINT: L_SZ, T: type int) split
     │        ───────────────────────────┬──────────────────────────  
     │                                   ╰──────────────────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[1]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[{concrete_type_variable_28}]
     ╭─[ util.sus:212:3 ]
     │
 212 │        SplitAt #(SIZE: WIDTH, SPLIT_POINT: L_SZ, T: type int) split
     │        ───────────────────────────┬──────────────────────────  
     │                                   ╰──────────────────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[{concrete_type_variable_28}]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[5]
     ╭─[ util.sus:212:3 ]
     │
 212 │        SplitAt #(SIZE: WIDTH, SPLIT_POINT: L_SZ, T: type int) split
     │        ───────────────────────────┬──────────────────────────  
     │                                   ╰──────────────────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[5]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[2]
     ╭─[ util.sus:212:3 ]
     │
 212 │        SplitAt #(SIZE: WIDTH, SPLIT_POINT: L_SZ, T: type int) split
     │        ───────────────────────────┬──────────────────────────  
     │                                   ╰──────────────────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[2]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[{concrete_type_variable_28}]
     ╭─[ util.sus:212:3 ]
     │
 212 │        SplitAt #(SIZE: WIDTH, SPLIT_POINT: L_SZ, T: type int) split
     │        ───────────────────────────┬──────────────────────────  
     │                                   ╰──────────────────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[{concrete_type_variable_28}]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[2]
     ╭─[ util.sus:212:3 ]
     │
 212 │        SplitAt #(SIZE: WIDTH, SPLIT_POINT: L_SZ, T: type int) split
     │        ───────────────────────────┬──────────────────────────  
     │                                   ╰──────────────────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[2]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[1]
     ╭─[ util.sus:212:3 ]
     │
 212 │        SplitAt #(SIZE: WIDTH, SPLIT_POINT: L_SZ, T: type int) split
     │        ───────────────────────────┬──────────────────────────  
     │                                   ╰──────────────────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[1]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[{concrete_type_variable_28}]
     ╭─[ util.sus:212:3 ]
     │
 212 │        SplitAt #(SIZE: WIDTH, SPLIT_POINT: L_SZ, T: type int) split
     │        ───────────────────────────┬──────────────────────────  
     │                                   ╰──────────────────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[{concrete_type_variable_28}]
─────╯
Error: Could not fully instantiate ::SplitAt #(
    T: type ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
),
    SIZE: 3,
    SPLIT_POINT: 1,
)
     ╭─[ util.sus:212:58 ]
     │
 212 │        SplitAt #(SIZE: WIDTH, SPLIT_POINT: L_SZ, T: type int) split
     │                                                               ──┬──  
     │                                                                 ╰──── Could not fully instantiate ::SplitAt #(
    T: type ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
),
    SIZE: 3,
    SPLIT_POINT: 1,
)
─────╯
Error: Could not fully instantiate ::SplitAt #(
    T: type ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
),
    SIZE: 5,
    SPLIT_POINT: 2,
)
     ╭─[ util.sus:212:58 ]
     │
 212 │        SplitAt #(SIZE: WIDTH, SPLIT_POINT: L_SZ, T: type int) split
     │                                                               ──┬──  
     │                                                                 ╰──── Could not fully instantiate ::SplitAt #(
    T: type ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
),
    SIZE: 5,
    SPLIT_POINT: 2,
)
─────╯
Error: Could not fully instantiate ::SplitAt #(
    T: type ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
),
    SIZE: 2,
    SPLIT_POINT: 1,
)
     ╭─[ util.sus:212:58 ]
     │
 212 │        SplitAt #(SIZE: WIDTH, SPLIT_POINT: L_SZ, T: type int) split
     │                                                               ──┬──  
     │                                                                 ╰──── Could not fully instantiate ::SplitAt #(
    T: type ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
),
    SIZE: 2,
    SPLIT_POINT: 1,
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[1]
     ╭─[ util.sus:213:3 ]
     │
 213 │        int[L_SZ] left_part, int[R_SZ] right_part = split(values)
     │        ─────────┬─────────  
     │                 ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[1]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[2]
     ╭─[ util.sus:213:3 ]
     │
 213 │        int[L_SZ] left_part, int[R_SZ] right_part = split(values)
     │        ─────────┬─────────  
     │                 ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[2]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[1]
     ╭─[ util.sus:213:3 ]
     │
 213 │        int[L_SZ] left_part, int[R_SZ] right_part = split(values)
     │        ─────────┬─────────  
     │                 ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[1]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[2]
     ╭─[ util.sus:213:24 ]
     │
 213 │        int[L_SZ] left_part, int[R_SZ] right_part = split(values)
     │                             ──────────┬─────────  
     │                                       ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[2]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[3]
     ╭─[ util.sus:213:24 ]
     │
 213 │        int[L_SZ] left_part, int[R_SZ] right_part = split(values)
     │                             ──────────┬─────────  
     │                                       ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[3]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[1]
     ╭─[ util.sus:213:24 ]
     │
 213 │        int[L_SZ] left_part, int[R_SZ] right_part = split(values)
     │                             ──────────┬─────────  
     │                                       ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[1]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ util.sus:216:3 ]
     │
 216 │        int left_total = TreeAdd #(WIDTH: L_SZ)(left_part)
     │        ───────┬──────  
     │               ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ util.sus:216:3 ]
     │
 216 │        int left_total = TreeAdd #(WIDTH: L_SZ)(left_part)
     │        ───────┬──────  
     │               ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ util.sus:216:3 ]
     │
 216 │        int left_total = TreeAdd #(WIDTH: L_SZ)(left_part)
     │        ───────┬──────  
     │               ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Error instantiating submodule
     ╭─[ util.sus:216:20 ]
     │
 216 │        int left_total = TreeAdd #(WIDTH: L_SZ)(left_part)
     │                         ───────────┬──────────  
     │                                    ╰──────────── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[1]
     ╭─[ util.sus:216:20 ]
     │
 216 │        int left_total = TreeAdd #(WIDTH: L_SZ)(left_part)
     │                         ───────────┬──────────  
     │                                    ╰──────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[1]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ util.sus:216:20 ]
     │
 216 │        int left_total = TreeAdd #(WIDTH: L_SZ)(left_part)
     │                         ───────────┬──────────  
     │                                    ╰──────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Error instantiating submodule
     ╭─[ util.sus:216:20 ]
     │
 216 │        int left_total = TreeAdd #(WIDTH: L_SZ)(left_part)
     │                         ───────────┬──────────  
     │                                    ╰──────────── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[2]
     ╭─[ util.sus:216:20 ]
     │
 216 │        int left_total = TreeAdd #(WIDTH: L_SZ)(left_part)
     │                         ───────────┬──────────  
     │                                    ╰──────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[2]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ util.sus:216:20 ]
     │
 216 │        int left_total = TreeAdd #(WIDTH: L_SZ)(left_part)
     │                         ───────────┬──────────  
     │                                    ╰──────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Error instantiating submodule
     ╭─[ util.sus:216:20 ]
     │
 216 │        int left_total = TreeAdd #(WIDTH: L_SZ)(left_part)
     │                         ───────────┬──────────  
     │                                    ╰──────────── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[1]
     ╭─[ util.sus:216:20 ]
     │
 216 │        int left_total = TreeAdd #(WIDTH: L_SZ)(left_part)
     │                         ───────────┬──────────  
     │                                    ╰──────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[1]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ util.sus:216:20 ]
     │
 216 │        int left_total = TreeAdd #(WIDTH: L_SZ)(left_part)
     │                         ───────────┬──────────  
     │                                    ╰──────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ util.sus:217:3 ]
     │
 217 │        int right_total = TreeAdd #(WIDTH: R_SZ)(right_part)
     │        ───────┬───────  
     │               ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ util.sus:217:3 ]
     │
 217 │        int right_total = TreeAdd #(WIDTH: R_SZ)(right_part)
     │        ───────┬───────  
     │               ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ util.sus:217:3 ]
     │
 217 │        int right_total = TreeAdd #(WIDTH: R_SZ)(right_part)
     │        ───────┬───────  
     │               ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Error instantiating submodule
     ╭─[ util.sus:217:21 ]
     │
 217 │        int right_total = TreeAdd #(WIDTH: R_SZ)(right_part)
     │                          ───────────┬──────────  
     │                                     ╰──────────── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[2]
     ╭─[ util.sus:217:21 ]
     │
 217 │        int right_total = TreeAdd #(WIDTH: R_SZ)(right_part)
     │                          ───────────┬──────────  
     │                                     ╰──────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[2]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ util.sus:217:21 ]
     │
 217 │        int right_total = TreeAdd #(WIDTH: R_SZ)(right_part)
     │                          ───────────┬──────────  
     │                                     ╰──────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Error instantiating submodule
     ╭─[ util.sus:217:21 ]
     │
 217 │        int right_total = TreeAdd #(WIDTH: R_SZ)(right_part)
     │                          ───────────┬──────────  
     │                                     ╰──────────── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[3]
     ╭─[ util.sus:217:21 ]
     │
 217 │        int right_total = TreeAdd #(WIDTH: R_SZ)(right_part)
     │                          ───────────┬──────────  
     │                                     ╰──────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[3]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ util.sus:217:21 ]
     │
 217 │        int right_total = TreeAdd #(WIDTH: R_SZ)(right_part)
     │                          ───────────┬──────────  
     │                                     ╰──────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Error instantiating submodule
     ╭─[ util.sus:217:21 ]
     │
 217 │        int right_total = TreeAdd #(WIDTH: R_SZ)(right_part)
     │                          ───────────┬──────────  
     │                                     ╰──────────── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[1]
     ╭─[ util.sus:217:21 ]
     │
 217 │        int right_total = TreeAdd #(WIDTH: R_SZ)(right_part)
     │                          ───────────┬──────────  
     │                                     ╰──────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[1]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ util.sus:217:21 ]
     │
 217 │        int right_total = TreeAdd #(WIDTH: R_SZ)(right_part)
     │                          ───────────┬──────────  
     │                                     ╰──────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_19), Unknown(concrete_type_variable_20)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_23), Unknown(concrete_type_variable_24)]) })
     ╭─[ util.sus:221:15 ]
     │
 221 │        reg total = left_total + right_total
     │                    ────────────┬───────────  
     │                                ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_19), Unknown(concrete_type_variable_20)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_23), Unknown(concrete_type_variable_24)]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ util.sus:221:15 ]
     │
 221 │        reg total = left_total + right_total
     │                    ────────────┬───────────  
     │                                ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_19), Unknown(concrete_type_variable_20)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_23), Unknown(concrete_type_variable_24)]) })
     ╭─[ util.sus:221:15 ]
     │
 221 │        reg total = left_total + right_total
     │                    ────────────┬───────────  
     │                                ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_19), Unknown(concrete_type_variable_20)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_23), Unknown(concrete_type_variable_24)]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ util.sus:221:15 ]
     │
 221 │        reg total = left_total + right_total
     │                    ────────────┬───────────  
     │                                ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_19), Unknown(concrete_type_variable_20)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_23), Unknown(concrete_type_variable_24)]) })
     ╭─[ util.sus:221:15 ]
     │
 221 │        reg total = left_total + right_total
     │                    ────────────┬───────────  
     │                                ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_19), Unknown(concrete_type_variable_20)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_23), Unknown(concrete_type_variable_24)]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ util.sus:221:15 ]
     │
 221 │        reg total = left_total + right_total
     │                    ────────────┬───────────  
     │                                ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[4]
   ╭─[ test.sus:3:25 ]
   │
 3 │     interface example_md : int[4] factors,
   │                            ───────┬──────  
   │                                   ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[4]
───╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
   ╭─[ test.sus:4:3 ]
   │
 4 │        int add_to ->
   │        ─────┬────  
   │             ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
───╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
   ╭─[ test.sus:5:3 ]
   │
 5 │        int product,
   │        ─────┬─────  
   │             ╰─────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
───╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
   ╭─[ test.sus:6:3 ]
   │
 6 │        int total
   │        ────┬────  
   │            ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
───╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
   ╭─[ test.sus:8:6 ]
   │
 8 │     reg int mul0 = factors[0] * factors[1]
   │         ────┬───  
   │             ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
───╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) })
   ╭─[ test.sus:8:17 ]
   │
 8 │     reg int mul0 = factors[0] * factors[1]
   │                    ───────────┬───────────  
   │                               ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) })
───╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
   ╭─[ test.sus:8:17 ]
   │
 8 │     reg int mul0 = factors[0] * factors[1]
   │                    ─────┬────  
   │                         ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
───╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
   ╭─[ test.sus:8:17 ]
   │
 8 │     reg int mul0 = factors[0] * factors[1]
   │                    ───────────┬───────────  
   │                               ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
───╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
   ╭─[ test.sus:8:30 ]
   │
 8 │     reg int mul0 = factors[0] * factors[1]
   │                                 ─────┬────  
   │                                      ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
───╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
   ╭─[ test.sus:9:6 ]
   │
 9 │     reg int mul1 = factors[2] * factors[3]
   │         ────┬───  
   │             ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
───╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_17), Unknown(concrete_type_variable_18)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) })
   ╭─[ test.sus:9:17 ]
   │
 9 │     reg int mul1 = factors[2] * factors[3]
   │                    ───────────┬───────────  
   │                               ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_17), Unknown(concrete_type_variable_18)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) })
───╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
   ╭─[ test.sus:9:17 ]
   │
 9 │     reg int mul1 = factors[2] * factors[3]
   │                    ─────┬────  
   │                         ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
───╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
   ╭─[ test.sus:9:17 ]
   │
 9 │     reg int mul1 = factors[2] * factors[3]
   │                    ───────────┬───────────  
   │                               ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
───╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
   ╭─[ test.sus:9:30 ]
   │
 9 │     reg int mul1 = factors[2] * factors[3]
   │                                 ─────┬────  
   │                                      ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
───╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_17), Unknown(concrete_type_variable_18)]) })
    ╭─[ test.sus:11:16 ]
    │
 11 │     reg product = mul0 * mul1
    │                   ─────┬─────  
    │                        ╰─────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_17), Unknown(concrete_type_variable_18)]) })
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:11:16 ]
    │
 11 │     reg product = mul0 * mul1
    │                   ─────┬─────  
    │                        ╰─────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6), Unknown(concrete_type_variable_7)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
    ╭─[ test.sus:12:14 ]
    │
 12 │     reg total = product + add_to
    │                 ────────┬───────  
    │                         ╰───────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6), Unknown(concrete_type_variable_7)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:12:14 ]
    │
 12 │     reg total = product + add_to
    │                 ────────┬───────  
    │                         ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:18:27 ]
    │
 18 │     interface multiply_add : int a, int b, int c -> int total
    │                              ──┬──  
    │                                ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:18:34 ]
    │
 18 │     interface multiply_add : int a, int b, int c -> int total
    │                                     ──┬──  
    │                                       ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:18:41 ]
    │
 18 │     interface multiply_add : int a, int b, int c -> int total
    │                                            ──┬──  
    │                                              ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:18:50 ]
    │
 18 │     interface multiply_add : int a, int b, int c -> int total
    │                                                     ────┬────  
    │                                                         ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:20:6 ]
    │
 20 │     reg int tmp = a * b
    │         ───┬───  
    │            ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
    ╭─[ test.sus:20:16 ]
    │
 20 │     reg int tmp = a * b
    │                   ──┬──  
    │                     ╰──── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:20:16 ]
    │
 20 │     reg int tmp = a * b
    │                   ──┬──  
    │                     ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6), Unknown(concrete_type_variable_7)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) })
    ╭─[ test.sus:21:10 ]
    │
 21 │     total = tmp + c
    │             ───┬───  
    │                ╰───── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6), Unknown(concrete_type_variable_7)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) })
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:21:10 ]
    │
 21 │     total = tmp + c
    │             ───┬───  
    │                ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:26:2 ]
    │
 26 │     int a = pow17(2)
    │     ──┬──  
    │       ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
    ╭─[ test.sus:26:6 ]
    │
 26 │     int a = pow17(2)
    │         ┬  
    │         ╰── Unused Variable: This variable does not affect the output ports of this module
────╯
Error: Error instantiating submodule
    ╭─[ test.sus:26:10 ]
    │
 26 │     int a = pow17(2)
    │             ──┬──  
    │               ╰──── Error instantiating submodule
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:26:10 ]
    │
 26 │     int a = pow17(2)
    │             ──┬──  
    │               ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:30:23 ]
    │
 30 │     interface pow17 : int i -> int o
    │                       ──┬──  
    │                         ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:30:32 ]
    │
 30 │     interface pow17 : int i -> int o
    │                                ──┬──  
    │                                  ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:31:6 ]
    │
 31 │         int i2  = i   * i
    │         ───┬──  
    │            ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) })
    ╭─[ test.sus:31:16 ]
    │
 31 │         int i2  = i   * i
    │                   ───┬───  
    │                      ╰───── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) })
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:31:16 ]
    │
 31 │         int i2  = i   * i
    │                   ───┬───  
    │                      ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:32:6 ]
    │
 32 │     reg int i4  = i2  * i2
    │         ───┬──  
    │            ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_7), Unknown(concrete_type_variable_8)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) })
    ╭─[ test.sus:32:16 ]
    │
 32 │     reg int i4  = i2  * i2
    │                   ────┬───  
    │                       ╰───── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_7), Unknown(concrete_type_variable_8)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) })
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:32:16 ]
    │
 32 │     reg int i4  = i2  * i2
    │                   ────┬───  
    │                       ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:33:6 ]
    │
 33 │         int i8  = i4  * i4
    │         ───┬──  
    │            ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_10), Unknown(concrete_type_variable_11)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_7), Unknown(concrete_type_variable_8)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_7), Unknown(concrete_type_variable_8)]) })
    ╭─[ test.sus:33:16 ]
    │
 33 │         int i8  = i4  * i4
    │                   ────┬───  
    │                       ╰───── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_10), Unknown(concrete_type_variable_11)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_7), Unknown(concrete_type_variable_8)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_7), Unknown(concrete_type_variable_8)]) })
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:33:16 ]
    │
 33 │         int i8  = i4  * i4
    │                   ────┬───  
    │                       ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:34:6 ]
    │
 34 │     reg int i16 = i8  * i8
    │         ───┬───  
    │            ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_13), Unknown(concrete_type_variable_14)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_10), Unknown(concrete_type_variable_11)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_10), Unknown(concrete_type_variable_11)]) })
    ╭─[ test.sus:34:16 ]
    │
 34 │     reg int i16 = i8  * i8
    │                   ────┬───  
    │                       ╰───── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_13), Unknown(concrete_type_variable_14)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_10), Unknown(concrete_type_variable_11)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_10), Unknown(concrete_type_variable_11)]) })
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:34:16 ]
    │
 34 │     reg int i16 = i8  * i8
    │                   ────┬───  
    │                       ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_13), Unknown(concrete_type_variable_14)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) })
    ╭─[ test.sus:35:16 ]
    │
 35 │             o   = i16 * i
    │                   ───┬───  
    │                      ╰───── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_13), Unknown(concrete_type_variable_14)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) })
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:35:16 ]
    │
 35 │             o   = i16 * i
    │                   ───┬───  
    │                      ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: This compile-time constant contains Unset
    ╭─[ test.sus:41:8 ]
    │
 41 │     state int cur = 1
    │           ───┬───  
    │              ╰───── This compile-time constant contains Unset
────╯
Error: This compile-time constant contains Unset
    ╭─[ test.sus:42:8 ]
    │
 42 │     state int prev = 0
    │           ────┬───  
    │               ╰───── This compile-time constant contains Unset
────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 1,
    MAX: 2,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
    ╭─[ test.sus:42:8 ]
    │
 42 │     state int prev = 0
    │           ────┬───  
    │               ╰───── Typing Error: write wire access expects a ::int #(
    MIN: 1,
    MAX: 2,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:51:20 ]
    │
 51 │     interface blur2 : int data, bool first -> int blurred
    │                       ────┬───  
    │                           ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:51:44 ]
    │
 51 │     interface blur2 : int data, bool first -> int blurred
    │                                               ─────┬─────  
    │                                                    ╰─────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: This compile-time constant contains Unset
    ╭─[ test.sus:53:8 ]
    │
 53 │     state int prev
    │           ────┬───  
    │               ╰───── This compile-time constant contains Unset
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:53:8 ]
    │
 53 │     state int prev
    │           ────┬───  
    │               ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_5)]) })
    ╭─[ test.sus:56:13 ]
    │
 56 │        blurred = data + prev
    │                  ─────┬─────  
    │                       ╰─────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_5)]) })
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:56:13 ]
    │
 56 │        blurred = data + prev
    │                  ─────┬─────  
    │                       ╰─────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
    ╭─[ test.sus:60:10 ]
    │
 60 │     gen int a
    │             ┬  
    │             ╰── Unused Variable: This variable does not affect the output ports of this module
────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
    ╭─[ test.sus:62:11 ]
    │
 62 │     gen bool b = true
    │              ┬  
    │              ╰── Unused Variable: This variable does not affect the output ports of this module
────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
    ╭─[ test.sus:63:11 ]
    │
 63 │     gen bool bb = false
    │              ─┬  
    │               ╰── Unused Variable: This variable does not affect the output ports of this module
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[4]
    ╭─[ test.sus:74:31 ]
    │
 74 │     interface Tree_Multiply : int[4] values -> int total
    │                               ──────┬──────  
    │                                     ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[4]
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:74:48 ]
    │
 74 │     interface Tree_Multiply : int[4] values -> int total
    │                                                ────┬────  
    │                                                    ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:75:6 ]
    │
 75 │     reg int a = values[0] * values[1]
    │         ──┬──  
    │           ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) })
    ╭─[ test.sus:75:14 ]
    │
 75 │     reg int a = values[0] * values[1]
    │                 ──────────┬──────────  
    │                           ╰──────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) })
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:75:14 ]
    │
 75 │     reg int a = values[0] * values[1]
    │                 ────┬────  
    │                     ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:75:14 ]
    │
 75 │     reg int a = values[0] * values[1]
    │                 ──────────┬──────────  
    │                           ╰──────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:75:26 ]
    │
 75 │     reg int a = values[0] * values[1]
    │                             ────┬────  
    │                                 ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:76:6 ]
    │
 76 │     reg int b = values[2] * values[3]
    │         ──┬──  
    │           ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_13), Unknown(concrete_type_variable_14)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) })
    ╭─[ test.sus:76:14 ]
    │
 76 │     reg int b = values[2] * values[3]
    │                 ──────────┬──────────  
    │                           ╰──────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_13), Unknown(concrete_type_variable_14)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) })
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:76:14 ]
    │
 76 │     reg int b = values[2] * values[3]
    │                 ────┬────  
    │                     ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:76:14 ]
    │
 76 │     reg int b = values[2] * values[3]
    │                 ──────────┬──────────  
    │                           ╰──────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:76:26 ]
    │
 76 │     reg int b = values[2] * values[3]
    │                             ────┬────  
    │                                 ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_13), Unknown(concrete_type_variable_14)]) })
    ╭─[ test.sus:77:14 ]
    │
 77 │     reg total = a * b
    │                 ──┬──  
    │                   ╰──── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_13), Unknown(concrete_type_variable_14)]) })
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:77:14 ]
    │
 77 │     reg total = a * b
    │                 ──┬──  
    │                   ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:81:29 ]
    │
 81 │     interface Accumulator : int term, bool done -> int total
    │                             ────┬───  
    │                                 ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(0)), Value(Integer(1))]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(0)), Value(Integer(1))]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) })
    ╭─[ test.sus:85:19 ]
    │
 85 │     int new_tot = tot + term
    │                   ─────┬────  
    │                        ╰────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(0)), Value(Integer(1))]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(0)), Value(Integer(1))]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) })
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:97:22 ]
    │
 97 │     interface blur : int a, bool done -> int result
    │                      ──┬──  
    │                        ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
    ╭─[ test.sus:97:42 ]
    │
 97 │     interface blur : int a, bool done -> int result
    │                                          ─────┬────  
    │                                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
────╯
Error: This compile-time constant contains Unset
     ╭─[ test.sus:100:8 ]
     │
 100 │     state int prev
     │           ────┬───  
     │               ╰───── This compile-time constant contains Unset
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:100:8 ]
     │
 100 │     state int prev
     │           ────┬───  
     │               ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_5)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) })
     ╭─[ test.sus:103:24 ]
     │
 103 │        reg reg reg result = prev + a // Add a pipeline stage for shits and giggles
     │                             ────┬───  
     │                                 ╰───── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_5)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:103:24 ]
     │
 103 │        reg reg reg result = prev + a // Add a pipeline stage for shits and giggles
     │                             ────┬───  
     │                                 ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[4]
     ╭─[ test.sus:113:25 ]
     │
 113 │     interface Unpack4 : int[4] packed -> int out_stream
     │                         ──────┬──────  
     │                               ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[4]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:113:42 ]
     │
 113 │     interface Unpack4 : int[4] packed -> int out_stream
     │                                          ───────┬──────  
     │                                                 ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:115:10 ]
     │
 115 │     gen int A = 1
     │             ┬  
     │             ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 1,
    MAX: 2,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:118:11 ]
     │
 118 │     state int st
     │           ───┬──  
     │              ╰──── Typing Error: write wire access expects a ::int #(
    MIN: 1,
    MAX: 2,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 2,
    MAX: 3,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:118:11 ]
     │
 118 │     state int st
     │           ───┬──  
     │              ╰──── Typing Error: write wire access expects a ::int #(
    MIN: 2,
    MAX: 3,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 3,
    MAX: 4,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:118:11 ]
     │
 118 │     state int st
     │           ───┬──  
     │              ╰──── Typing Error: write wire access expects a ::int #(
    MIN: 3,
    MAX: 4,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: This compile-time constant contains Unset
     ╭─[ test.sus:120:11 ]
     │
 120 │     state int[3] stored_packed
     │           ──────────┬─────────  
     │                     ╰─────────── This compile-time constant contains Unset
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[3]
     ╭─[ test.sus:120:11 ]
     │
 120 │     state int[3] stored_packed
     │           ──────────┬─────────  
     │                     ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[3]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:123:22 ]
     │
 123 │         out_stream = packed[0]
     │                      ────┬────  
     │                          ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:124:28 ]
     │
 124 │         stored_packed[0] = packed[1] // Shorthand notation is possible here "stored_packed[0:2] = packed[1:3]"
     │                            ────┬────  
     │                                ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:125:28 ]
     │
 125 │         stored_packed[1] = packed[2]
     │                            ────┬────  
     │                                ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:126:28 ]
     │
 126 │         stored_packed[2] = packed[3]
     │                            ────┬────  
     │                                ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:129:22 ]
     │
 129 │         out_stream = stored_packed[0]
     │                      ────────┬───────  
     │                              ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:132:22 ]
     │
 132 │         out_stream = stored_packed[1]
     │                      ────────┬───────  
     │                              ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:135:22 ]
     │
 135 │         out_stream = stored_packed[2]
     │                      ────────┬───────  
     │                              ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:144:13 ]
     │
 144 │     gen int[x] ys
     │                ─┬  
     │                 ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:148:13 ]
     │
 148 │     gen int[3] ps
     │                ─┬  
     │                 ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:155:13 ]
     │
 155 │     gen int[3] xx = a
     │                ─┬  
     │                 ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: 'i' is read-only
     ╭─[ test.sus:159:11 ]
     │
 142 │     interface generative : int i -> int o, int o2
     │                                ┬  
     │                                ╰── 'i' declared here
     │ 
 159 │     if test {i = 5}
     │              ┬  
     │              ╰── 'i' is read-only
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[10]
     ╭─[ test.sus:166:35 ]
     │
 166 │     interface add_indices_to_array : int[10] values -> int[10] added_values
     │                                      ───────┬──────  
     │                                             ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[10]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[10]
     ╭─[ test.sus:166:53 ]
     │
 166 │     interface add_indices_to_array : int[10] values -> int[10] added_values
     │                                                        ──────────┬─────────  
     │                                                                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[10]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:169:3 ]
     │
 169 │        int t = values[i]
     │        ──┬──  
     │          ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:169:3 ]
     │
 169 │        int t = values[i]
     │        ──┬──  
     │          ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:169:3 ]
     │
 169 │        int t = values[i]
     │        ──┬──  
     │          ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:169:3 ]
     │
 169 │        int t = values[i]
     │        ──┬──  
     │          ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:169:3 ]
     │
 169 │        int t = values[i]
     │        ──┬──  
     │          ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:169:3 ]
     │
 169 │        int t = values[i]
     │        ──┬──  
     │          ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:169:3 ]
     │
 169 │        int t = values[i]
     │        ──┬──  
     │          ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:169:3 ]
     │
 169 │        int t = values[i]
     │        ──┬──  
     │          ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:169:3 ]
     │
 169 │        int t = values[i]
     │        ──┬──  
     │          ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:169:3 ]
     │
 169 │        int t = values[i]
     │        ──┬──  
     │          ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:169:11 ]
     │
 169 │        int t = values[i]
     │                ────┬────  
     │                    ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:169:11 ]
     │
 169 │        int t = values[i]
     │                ────┬────  
     │                    ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:169:11 ]
     │
 169 │        int t = values[i]
     │                ────┬────  
     │                    ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:169:11 ]
     │
 169 │        int t = values[i]
     │                ────┬────  
     │                    ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:169:11 ]
     │
 169 │        int t = values[i]
     │                ────┬────  
     │                    ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:169:11 ]
     │
 169 │        int t = values[i]
     │                ────┬────  
     │                    ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:169:11 ]
     │
 169 │        int t = values[i]
     │                ────┬────  
     │                    ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:169:11 ]
     │
 169 │        int t = values[i]
     │                ────┬────  
     │                    ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:169:11 ]
     │
 169 │        int t = values[i]
     │                ────┬────  
     │                    ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:169:11 ]
     │
 169 │        int t = values[i]
     │                ────┬────  
     │                    ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6), Unknown(concrete_type_variable_7)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(0)), Value(Integer(1))]) })
     ╭─[ test.sus:170:21 ]
     │
 170 │        added_values[i] = t + i
     │                          ──┬──  
     │                            ╰──── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6), Unknown(concrete_type_variable_7)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(0)), Value(Integer(1))]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6), Unknown(concrete_type_variable_15)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(1)), Value(Integer(2))]) })
     ╭─[ test.sus:170:21 ]
     │
 170 │        added_values[i] = t + i
     │                          ──┬──  
     │                            ╰──── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6), Unknown(concrete_type_variable_15)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(1)), Value(Integer(2))]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6), Unknown(concrete_type_variable_23)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(2)), Value(Integer(3))]) })
     ╭─[ test.sus:170:21 ]
     │
 170 │        added_values[i] = t + i
     │                          ──┬──  
     │                            ╰──── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6), Unknown(concrete_type_variable_23)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(2)), Value(Integer(3))]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6), Unknown(concrete_type_variable_31)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(3)), Value(Integer(4))]) })
     ╭─[ test.sus:170:21 ]
     │
 170 │        added_values[i] = t + i
     │                          ──┬──  
     │                            ╰──── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6), Unknown(concrete_type_variable_31)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(3)), Value(Integer(4))]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6), Unknown(concrete_type_variable_39)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(4)), Value(Integer(5))]) })
     ╭─[ test.sus:170:21 ]
     │
 170 │        added_values[i] = t + i
     │                          ──┬──  
     │                            ╰──── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6), Unknown(concrete_type_variable_39)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(4)), Value(Integer(5))]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6), Unknown(concrete_type_variable_47)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(5)), Value(Integer(6))]) })
     ╭─[ test.sus:170:21 ]
     │
 170 │        added_values[i] = t + i
     │                          ──┬──  
     │                            ╰──── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6), Unknown(concrete_type_variable_47)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(5)), Value(Integer(6))]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6), Unknown(concrete_type_variable_55)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(6)), Value(Integer(7))]) })
     ╭─[ test.sus:170:21 ]
     │
 170 │        added_values[i] = t + i
     │                          ──┬──  
     │                            ╰──── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6), Unknown(concrete_type_variable_55)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(6)), Value(Integer(7))]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6), Unknown(concrete_type_variable_63)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(7)), Value(Integer(8))]) })
     ╭─[ test.sus:170:21 ]
     │
 170 │        added_values[i] = t + i
     │                          ──┬──  
     │                            ╰──── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6), Unknown(concrete_type_variable_63)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(7)), Value(Integer(8))]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6), Unknown(concrete_type_variable_71)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(8)), Value(Integer(9))]) })
     ╭─[ test.sus:170:21 ]
     │
 170 │        added_values[i] = t + i
     │                          ──┬──  
     │                            ╰──── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6), Unknown(concrete_type_variable_71)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(8)), Value(Integer(9))]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6), Unknown(concrete_type_variable_79)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(9)), Value(Integer(10))]) })
     ╭─[ test.sus:170:21 ]
     │
 170 │        added_values[i] = t + i
     │                          ──┬──  
     │                            ╰──── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6), Unknown(concrete_type_variable_79)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(9)), Value(Integer(10))]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:170:21 ]
     │
 170 │        added_values[i] = t + i
     │                          ──┬──  
     │                            ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:170:21 ]
     │
 170 │        added_values[i] = t + i
     │                          ──┬──  
     │                            ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:170:21 ]
     │
 170 │        added_values[i] = t + i
     │                          ──┬──  
     │                            ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:170:21 ]
     │
 170 │        added_values[i] = t + i
     │                          ──┬──  
     │                            ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:170:21 ]
     │
 170 │        added_values[i] = t + i
     │                          ──┬──  
     │                            ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:170:21 ]
     │
 170 │        added_values[i] = t + i
     │                          ──┬──  
     │                            ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:170:21 ]
     │
 170 │        added_values[i] = t + i
     │                          ──┬──  
     │                            ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:170:21 ]
     │
 170 │        added_values[i] = t + i
     │                          ──┬──  
     │                            ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:170:21 ]
     │
 170 │        added_values[i] = t + i
     │                          ──┬──  
     │                            ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:170:21 ]
     │
 170 │        added_values[i] = t + i
     │                          ──┬──  
     │                            ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:175:40 ]
     │
 175 │     interface assignment_producer : -> int v'0, int o'0, bool j'0 }
     │                                        ───┬───  
     │                                           ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:175:49 ]
     │
 175 │     interface assignment_producer : -> int v'0, int o'0, bool j'0 }
     │                                                 ───┬───  
     │                                                    ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: This port is not strongly connected to the strongly connected port cluster 'v'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
     ╭─[ test.sus:175:53 ]
     │
 175 │     interface assignment_producer : -> int v'0, int o'0, bool j'0 }
     │                                            ┬        ┬  
     │                                            ╰─────────── 'v' declared here
     │                                                     │  
     │                                                     ╰── This port is not strongly connected to the strongly connected port cluster 'v'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
─────╯
Error: This port is not strongly connected to the strongly connected port cluster 'v'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
     ╭─[ test.sus:175:63 ]
     │
 175 │     interface assignment_producer : -> int v'0, int o'0, bool j'0 }
     │                                            ┬                  ┬  
     │                                            ╰───────────────────── 'v' declared here
     │                                                               │  
     │                                                               ╰── This port is not strongly connected to the strongly connected port cluster 'v'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
─────╯
Error: This compile-time constant contains Unset
     ╭─[ test.sus:178:8 ]
     │
 178 │     state int[3] st
     │           ────┬────  
     │               ╰────── This compile-time constant contains Unset
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[3]
     ╭─[ test.sus:178:8 ]
     │
 178 │     state int[3] st
     │           ────┬────  
     │               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[3]
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:178:15 ]
     │
 178 │     state int[3] st
     │                  ─┬  
     │                   ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:179:7 ]
     │
 179 │     bool b
     │          ┬  
     │          ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:180:6 ]
     │
 180 │     reg int a, st[2], reg reg b = assignment_producer()
     │         ──┬──  
     │           ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:180:10 ]
     │
 180 │     reg int a, st[2], reg reg b = assignment_producer()
     │             ┬  
     │             ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Error instantiating submodule
     ╭─[ test.sus:180:32 ]
     │
 180 │     reg int a, st[2], reg reg b = assignment_producer()
     │                                   ─────────┬─────────  
     │                                            ╰─────────── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:180:32 ]
     │
 180 │     reg int a, st[2], reg reg b = assignment_producer()
     │                                   ─────────┬─────────  
     │                                            ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:180:32 ]
     │
 180 │     reg int a, st[2], reg reg b = assignment_producer()
     │                                   ─────────┬─────────  
     │                                            ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 1,
    MAX: 2,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:185:49 ]
     │
 185 │     interface first_bit_idx_6 : bool[6] bits -> int first, bool all_zeros
     │                                                 ────┬────  
     │                                                     ╰────── Typing Error: write wire access expects a ::int #(
    MIN: 1,
    MAX: 2,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 2,
    MAX: 3,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:185:49 ]
     │
 185 │     interface first_bit_idx_6 : bool[6] bits -> int first, bool all_zeros
     │                                                 ────┬────  
     │                                                     ╰────── Typing Error: write wire access expects a ::int #(
    MIN: 2,
    MAX: 3,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 3,
    MAX: 4,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:185:49 ]
     │
 185 │     interface first_bit_idx_6 : bool[6] bits -> int first, bool all_zeros
     │                                                 ────┬────  
     │                                                     ╰────── Typing Error: write wire access expects a ::int #(
    MIN: 3,
    MAX: 4,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 4,
    MAX: 5,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:185:49 ]
     │
 185 │     interface first_bit_idx_6 : bool[6] bits -> int first, bool all_zeros
     │                                                 ────┬────  
     │                                                     ╰────── Typing Error: write wire access expects a ::int #(
    MIN: 4,
    MAX: 5,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 5,
    MAX: 6,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:185:49 ]
     │
 185 │     interface first_bit_idx_6 : bool[6] bits -> int first, bool all_zeros
     │                                                 ────┬────  
     │                                                     ╰────── Typing Error: write wire access expects a ::int #(
    MIN: 5,
    MAX: 6,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:218:49 ]
     │
 218 │     interface multiply_add_with_latencies : int a'0, int b'0, int c'0 -> int r'0
     │                                                 ┬  
     │                                                 ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:218:58 ]
     │
 218 │     interface multiply_add_with_latencies : int a'0, int b'0, int c'0 -> int r'0
     │                                                          ┬  
     │                                                          ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: No Global of the name 'multiply' was found. Did you forget to import it?
     ╭─[ test.sus:219:17 ]
     │
 219 │     int tmp'1 = multiply(a, b)
     │                 ────┬───  
     │                     ╰───── No Global of the name 'multiply' was found. Did you forget to import it?
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:224:43 ]
     │
 224 │     interface first_bit_idx_24 : bool[24] bits -> int first
     │                                           ──┬─  
     │                                             ╰─── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:224:51 ]
     │
 224 │     interface first_bit_idx_24 : bool[24] bits -> int first
     │                                                   ────┬────  
     │                                                       ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Pre-emptive error because latency-unspecified 'first' is never written to. 
(This is because work-in-progress code would get a lot of latency counting errors while unfinished)
     ╭─[ test.sus:224:55 ]
     │
 224 │     interface first_bit_idx_24 : bool[24] bits -> int first
     │                                                       ──┬──  
     │                                                         ╰──── Pre-emptive error because latency-unspecified 'first' is never written to. 
(This is because work-in-progress code would get a lot of latency counting errors while unfinished)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[4]
     ╭─[ test.sus:225:2 ]
     │
 225 │     int[4] offsets
     │     ───────┬──────  
     │            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[4]
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:225:9 ]
     │
 225 │     int[4] offsets
     │            ───┬───  
     │               ╰───── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:226:10 ]
     │
 226 │     bool[4] was_nonzeros
     │             ──────┬─────  
     │                   ╰─────── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:228:10 ]
     │
 228 │     for int i in 0..4 {
     │             ┬  
     │             ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:229:11 ]
     │
 229 │        bool[6] these_bits
     │                ─────┬────  
     │                     ╰────── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:230:11 ]
     │
 230 │        for int j in 0..6 {
     │                ┬  
     │                ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:234:3 ]
     │
 234 │        int offset, bool was_nonzero = first_bit_idx_6(these_bits)
     │        ─────┬────  
     │             ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:234:3 ]
     │
 234 │        int offset, bool was_nonzero = first_bit_idx_6(these_bits)
     │        ─────┬────  
     │             ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:234:3 ]
     │
 234 │        int offset, bool was_nonzero = first_bit_idx_6(these_bits)
     │        ─────┬────  
     │             ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:234:3 ]
     │
 234 │        int offset, bool was_nonzero = first_bit_idx_6(these_bits)
     │        ─────┬────  
     │             ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:234:7 ]
     │
 234 │        int offset, bool was_nonzero = first_bit_idx_6(these_bits)
     │            ───┬──  
     │               ╰──── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:234:20 ]
     │
 234 │        int offset, bool was_nonzero = first_bit_idx_6(these_bits)
     │                         ─────┬─────  
     │                              ╰─────── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Error instantiating submodule
     ╭─[ test.sus:234:34 ]
     │
 234 │        int offset, bool was_nonzero = first_bit_idx_6(these_bits)
     │                                       ───────┬───────  
     │                                              ╰───────── Error instantiating submodule
─────╯
Error: Error instantiating submodule
     ╭─[ test.sus:234:34 ]
     │
 234 │        int offset, bool was_nonzero = first_bit_idx_6(these_bits)
     │                                       ───────┬───────  
     │                                              ╰───────── Error instantiating submodule
─────╯
Error: Error instantiating submodule
     ╭─[ test.sus:234:34 ]
     │
 234 │        int offset, bool was_nonzero = first_bit_idx_6(these_bits)
     │                                       ───────┬───────  
     │                                              ╰───────── Error instantiating submodule
─────╯
Error: Error instantiating submodule
     ╭─[ test.sus:234:34 ]
     │
 234 │        int offset, bool was_nonzero = first_bit_idx_6(these_bits)
     │                                       ───────┬───────  
     │                                              ╰───────── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:234:34 ]
     │
 234 │        int offset, bool was_nonzero = first_bit_idx_6(these_bits)
     │                                       ───────┬───────  
     │                                              ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:234:34 ]
     │
 234 │        int offset, bool was_nonzero = first_bit_idx_6(these_bits)
     │                                       ───────┬───────  
     │                                              ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:234:34 ]
     │
 234 │        int offset, bool was_nonzero = first_bit_idx_6(these_bits)
     │                                       ───────┬───────  
     │                                              ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:234:34 ]
     │
 234 │        int offset, bool was_nonzero = first_bit_idx_6(these_bits)
     │                                       ───────┬───────  
     │                                              ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:241:40 ]
     │
 241 │     interface permute : bool[128] mbf, int selected_permutation -> bool[128] permuted_mbf
     │                                        ────────────┬───────────  
     │                                                    ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:241:44 ]
     │
 241 │     interface permute : bool[128] mbf, int selected_permutation -> bool[128] permuted_mbf
     │                                            ──────────┬─────────  
     │                                                      ╰─────────── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: This port is not strongly connected to the strongly connected port cluster 'mbf'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
     ╭─[ test.sus:241:44 ]
     │
 241 │     interface permute : bool[128] mbf, int selected_permutation -> bool[128] permuted_mbf
     │                                   ─┬─      ──────────┬─────────  
     │                                    ╰───────────────────────────── 'mbf' declared here
     │                                                      │           
     │                                                      ╰─────────── This port is not strongly connected to the strongly connected port cluster 'mbf'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
─────╯
Error: This port is not strongly connected to the strongly connected port cluster 'mbf'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
     ╭─[ test.sus:241:78 ]
     │
 241 │     interface permute : bool[128] mbf, int selected_permutation -> bool[128] permuted_mbf
     │                                   ─┬─                                        ──────┬─────  
     │                                    ╰─────────────────────────────────────────────────────── 'mbf' declared here
     │                                                                                    │       
     │                                                                                    ╰─────── This port is not strongly connected to the strongly connected port cluster 'mbf'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:248:37 ]
     │
 248 │     interface permute24 : bool[128] mbf, bool[24] valid_permutes, bool start -> bool[128] permuted_out, bool permuted_out_valid
     │                                     ─┬─  
     │                                      ╰─── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:248:51 ]
     │
 248 │     interface permute24 : bool[128] mbf, bool[24] valid_permutes, bool start -> bool[128] permuted_out, bool permuted_out_valid
     │                                                   ───────┬──────  
     │                                                          ╰──────── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:248:72 ]
     │
 248 │     interface permute24 : bool[128] mbf, bool[24] valid_permutes, bool start -> bool[128] permuted_out, bool permuted_out_valid
     │                                                                        ──┬──  
     │                                                                          ╰──── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Typing Error: variable reference expects a ::bool[] but was given a ::int
     ╭─[ test.sus:250:2 ]
     │
 250 │     state bool[24] stored_valid_permutes = 000000000000000000000000
     │     ──────────────────┬─────────────────  
     │                       ╰─────────────────── Typing Error: variable reference expects a ::bool[] but was given a ::int
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:252:10 ]
     │
 252 │     gen int aaaaa = 5
     │             ──┬──  
     │               ╰──── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Function call syntax is only possible on modules or interfaces of modules
     ╭─[ test.sus:267:2 ]
     │
 267 │     aaaaa()
     │     ──┬──  
     │       ╰──── Function call syntax is only possible on modules or interfaces of modules
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:273:34 ]
     │
 273 │     interface test_single_wire : int a -> int o
     │                                  ──┬──  
     │                                    ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:273:43 ]
     │
 273 │     interface test_single_wire : int a -> int o
     │                                           ──┬──  
     │                                             ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:278:32 ]
     │
 278 │     interface disjoint_ports : int a, int b, int c -> int result
     │                                ──┬──  
     │                                  ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:278:39 ]
     │
 278 │     interface disjoint_ports : int a, int b, int c -> int result
     │                                       ──┬──  
     │                                         ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:278:46 ]
     │
 278 │     interface disjoint_ports : int a, int b, int c -> int result
     │                                              ──┬──  
     │                                                ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:278:50 ]
     │
 278 │     interface disjoint_ports : int a, int b, int c -> int result
     │                                                  ┬  
     │                                                  ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: This port is not strongly connected to the strongly connected port cluster 'a', 'b'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
     ╭─[ test.sus:278:50 ]
     │
 278 │     interface disjoint_ports : int a, int b, int c -> int result
     │                                    ┬      ┬      ┬  
     │                                    ╰──────────────── 'a' declared here
     │                                           │      │  
     │                                           ╰───────── 'b' declared here
     │                                                  │  
     │                                                  ╰── This port is not strongly connected to the strongly connected port cluster 'a', 'b'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:278:55 ]
     │
 278 │     interface disjoint_ports : int a, int b, int c -> int result
     │                                                       ─────┬────  
     │                                                            ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: This port is not strongly connected to the strongly connected port cluster 'a', 'b'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
     ╭─[ test.sus:278:59 ]
     │
 278 │     interface disjoint_ports : int a, int b, int c -> int result
     │                                    ┬      ┬               ───┬──  
     │                                    ╰────────────────────────────── 'a' declared here
     │                                           │                  │    
     │                                           ╰─────────────────────── 'b' declared here
     │                                                              │    
     │                                                              ╰──── This port is not strongly connected to the strongly connected port cluster 'a', 'b'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6), Unknown(concrete_type_variable_7)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:279:15 ]
     │
 279 │     reg result = a + b
     │                  ──┬──  
     │                    ╰──── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6), Unknown(concrete_type_variable_7)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:279:15 ]
     │
 279 │     reg result = a + b
     │                  ──┬──  
     │                    ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:284:47 ]
     │
 284 │     interface undeteriminable_input_latency : int a, int b -> int x, int y
     │                                               ──┬──  
     │                                                 ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:284:54 ]
     │
 284 │     interface undeteriminable_input_latency : int a, int b -> int x, int y
     │                                                      ──┬──  
     │                                                        ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:284:63 ]
     │
 284 │     interface undeteriminable_input_latency : int a, int b -> int x, int y
     │                                                               ──┬──  
     │                                                                 ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:284:70 ]
     │
 284 │     interface undeteriminable_input_latency : int a, int b -> int x, int y
     │                                                                      ──┬──  
     │                                                                        ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Cannot determine port latency. Options are 0 and -1
Try specifying an explicit latency or rework the module to remove this ambiguity
     ╭─[ test.sus:284:74 ]
     │
 284 │     interface undeteriminable_input_latency : int a, int b -> int x, int y
     │                                                                          ┬  
     │                                                                          ╰── Cannot determine port latency. Options are 0 and -1
Try specifying an explicit latency or rework the module to remove this ambiguity
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:285:6 ]
     │
 285 │     reg int a_d = a
     │         ───┬───  
     │            ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:286:2 ]
     │
 286 │     int t = a_d + b
     │     ──┬──  
     │       ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_10), Unknown(concrete_type_variable_11)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_9)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:286:10 ]
     │
 286 │     int t = a_d + b
     │             ───┬───  
     │                ╰───── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_10), Unknown(concrete_type_variable_11)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_9)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:286:10 ]
     │
 286 │     int t = a_d + b
     │             ───┬───  
     │                ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:287:17 ]
     │
 287 │     reg reg reg int a_dd = a
     │                 ────┬───  
     │                     ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:288:6 ]
     │
 288 │     reg int t_d = t
     │         ───┬───  
     │            ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_10), Unknown(concrete_type_variable_16)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_14)]) })
     ╭─[ test.sus:289:9 ]
     │
 289 │     x = t_d + a_dd
     │         ─────┬────  
     │              ╰────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_10), Unknown(concrete_type_variable_16)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_14)]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:289:9 ]
     │
 289 │     x = t_d + a_dd
     │         ─────┬────  
     │              ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:294:41 ]
     │
 294 │     interface specified_input_latency : int a'0, int b'1 -> int x, int y
     │                                         ───┬───  
     │                                            ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:294:50 ]
     │
 294 │     interface specified_input_latency : int a'0, int b'1 -> int x, int y
     │                                                  ───┬───  
     │                                                     ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:294:61 ]
     │
 294 │     interface specified_input_latency : int a'0, int b'1 -> int x, int y
     │                                                             ──┬──  
     │                                                               ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:294:68 ]
     │
 294 │     interface specified_input_latency : int a'0, int b'1 -> int x, int y
     │                                                                    ──┬──  
     │                                                                      ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:295:6 ]
     │
 295 │     reg int a_d = a
     │         ───┬───  
     │            ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:296:5 ]
     │
 296 │     int t = a_d + b
     │     ──┬──  
     │       ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_10), Unknown(concrete_type_variable_11)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_9)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:296:13 ]
     │
 296 │     int t = a_d + b
     │             ───┬───  
     │                ╰───── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_10), Unknown(concrete_type_variable_11)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_9)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:296:13 ]
     │
 296 │     int t = a_d + b
     │             ───┬───  
     │                ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:297:17 ]
     │
 297 │     reg reg reg int a_dd = a
     │                 ────┬───  
     │                     ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:298:6 ]
     │
 298 │     reg int t_d = t
     │         ───┬───  
     │            ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_10), Unknown(concrete_type_variable_16)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_14)]) })
     ╭─[ test.sus:299:9 ]
     │
 299 │     x = t_d + a_dd
     │         ─────┬────  
     │              ╰────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_10), Unknown(concrete_type_variable_16)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_14)]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:299:9 ]
     │
 299 │     x = t_d + a_dd
     │         ─────┬────  
     │              ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:304:44 ]
     │
 304 │     interface determinable_input_latency : int a, int b -> int x, int y
     │                                            ──┬──  
     │                                              ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:304:51 ]
     │
 304 │     interface determinable_input_latency : int a, int b -> int x, int y
     │                                                   ──┬──  
     │                                                     ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:304:60 ]
     │
 304 │     interface determinable_input_latency : int a, int b -> int x, int y
     │                                                            ──┬──  
     │                                                              ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:304:67 ]
     │
 304 │     interface determinable_input_latency : int a, int b -> int x, int y
     │                                                                   ──┬──  
     │                                                                     ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:305:6 ]
     │
 305 │     reg int a_d = a
     │         ───┬───  
     │            ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:306:5 ]
     │
 306 │     int t = a_d + b
     │     ──┬──  
     │       ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_10), Unknown(concrete_type_variable_11)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_9)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:306:13 ]
     │
 306 │     int t = a_d + b
     │             ───┬───  
     │                ╰───── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_10), Unknown(concrete_type_variable_11)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_9)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:306:13 ]
     │
 306 │     int t = a_d + b
     │             ───┬───  
     │                ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:307:13 ]
     │
 307 │     reg reg int a_dd = a
     │             ────┬───  
     │                 ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:308:6 ]
     │
 308 │     reg int t_d = t
     │         ───┬───  
     │            ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_10), Unknown(concrete_type_variable_16)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_14)]) })
     ╭─[ test.sus:309:9 ]
     │
 309 │     x = t_d + a_dd
     │         ─────┬────  
     │              ╰────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_10), Unknown(concrete_type_variable_16)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_14)]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:309:9 ]
     │
 309 │     x = t_d + a_dd
     │         ─────┬────  
     │              ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:315:60 ]
     │
 315 │     interface determinable_because_no_input_output_ports : int a -> int x
     │                                                            ──┬──  
     │                                                              ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:315:69 ]
     │
 315 │     interface determinable_because_no_input_output_ports : int a -> int x
     │                                                                     ──┬──  
     │                                                                       ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:316:6 ]
     │
 316 │     reg int a_d = a
     │         ───┬───  
     │            ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:317:5 ]
     │
 317 │     int t = a_d
     │     ──┬──  
     │       ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:318:17 ]
     │
 318 │     reg reg reg int a_dd = a
     │                 ────┬───  
     │                     ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:319:6 ]
     │
 319 │     reg int t_d = t
     │         ───┬───  
     │            ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_11)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_9)]) })
     ╭─[ test.sus:320:9 ]
     │
 320 │     x = t_d + a_dd
     │         ─────┬────  
     │              ╰────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_11)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_9)]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:320:9 ]
     │
 320 │     x = t_d + a_dd
     │         ─────┬────  
     │              ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:325:50 ]
     │
 325 │     interface conflicting_latency_declarations : int a'0 -> int x'1
     │                                                  ───┬───  
     │                                                     ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:325:61 ]
     │
 325 │     interface conflicting_latency_declarations : int a'0 -> int x'1
     │                                                             ───┬───  
     │                                                                ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Conflicting specified latency

a'0
-> nio'1 (+1)
-> x'2 (+1)

But this was specified as x'1
     ╭─[ test.sus:325:67 ]
     │
 325 │     interface conflicting_latency_declarations : int a'0 -> int x'1
     │                                                      ┬            ┬  
     │                                                      ╰─────────────── 'a' declared here
     │                                                                   │  
     │                                                                   ╰── Conflicting specified latency

a'0
-> nio'1 (+1)
-> x'2 (+1)

But this was specified as x'1
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:326:6 ]
     │
 326 │     reg int nio = a
     │         ───┬───  
     │            ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:331:27 ]
     │
 331 │     interface bad_cycle : int a -> int r
     │                           ──┬──  
     │                             ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: This instruction is part of a net-positive latency cycle of +1

state_reg'1
-> state_reg'2 (+1)

Which conflicts with the starting latency
     ╭─[ test.sus:332:8 ]
     │
 332 │     state int state_reg
     │           ──────┬──────  
     │                 ╰──────── This instruction is part of a net-positive latency cycle of +1

state_reg'1
-> state_reg'2 (+1)

Which conflicts with the starting latency
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(0)), Value(Integer(1))]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(0)), Value(Integer(1))]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) })
     ╭─[ test.sus:337:18 ]
     │
 337 │     reg state_reg = state_reg + a
     │                     ──────┬──────  
     │                           ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(0)), Value(Integer(1))]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(0)), Value(Integer(1))]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:341:33 ]
     │
 341 │     interface module_taking_time : int i'0 -> int o'5
     │                                    ───┬───  
     │                                       ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:341:44 ]
     │
 341 │     interface module_taking_time : int i'0 -> int o'5
     │                                               ───┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[30][20]
     ╭─[ test.sus:347:3 ]
     │
 347 │        int[30][20] mat, int[20] vec -> int[30] result
     │        ───────┬───────  
     │               ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[30][20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:347:20 ]
     │
 347 │        int[30][20] mat, int[20] vec -> int[30] result
     │                         ─────┬─────  
     │                              ╰─────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[30]
     ╭─[ test.sus:347:35 ]
     │
 347 │        int[30][20] mat, int[20] vec -> int[30] result
     │                                        ───────┬──────  
     │                                               ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[30]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
     ╭─[ test.sus:350:3 ]
     │
 350 │        int[20] row_products
     │        ──────────┬─────────  
     │                  ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ──────┬──────  
     │                                    ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:24 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                              ────────────┬───────────  
     │                                          ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 20.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 20.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 20.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 20.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 20.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 20.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 20.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 20.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 20.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 20.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 20.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 20.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 20.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 20.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 20.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 20.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 20.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 20.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 20.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 20.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 20.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 20.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 20.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 20.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 20.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 20.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 20.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 20.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 20.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 20.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 20.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 20.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 20.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 20.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 20.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 20.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 20.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 20.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 20.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 20.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 21.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 21.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 21.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 21.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 21.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 21.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 21.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 21.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 21.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 21.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 21.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 21.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 21.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 21.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 21.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 21.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 21.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 21.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 21.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 21.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 21.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 21.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 21.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 21.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 21.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 21.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 21.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 21.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 21.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 21.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 21.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 21.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 21.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 21.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 21.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 21.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 21.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 21.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 21.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 21.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 22.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 22.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 22.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 22.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 22.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 22.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 22.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 22.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 22.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 22.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 22.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 22.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 22.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 22.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 22.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 22.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 22.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 22.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 22.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 22.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 22.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 22.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 22.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 22.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 22.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 22.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 22.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 22.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 22.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 22.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 22.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 22.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 22.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 22.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 22.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 22.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 22.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 22.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 22.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 22.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 23.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 23.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 23.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 23.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 23.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 23.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 23.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 23.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 23.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 23.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 23.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 23.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 23.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 23.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 23.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 23.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 23.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 23.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 23.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 23.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 23.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 23.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 23.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 23.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 23.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 23.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 23.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 23.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 23.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 23.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 23.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 23.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 23.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 23.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 23.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 23.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 23.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 23.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 23.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 23.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 24.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 24.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 24.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 24.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 24.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 24.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 24.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 24.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 24.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 24.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 24.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 24.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 24.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 24.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 24.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 24.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 24.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 24.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 24.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 24.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 24.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 24.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 24.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 24.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 24.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 24.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 24.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 24.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 24.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 24.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 24.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 24.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 24.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 24.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 24.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 24.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 24.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 24.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 24.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 24.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 25.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 25.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 25.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 25.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 25.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 25.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 25.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 25.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 25.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 25.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 25.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 25.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 25.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 25.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 25.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 25.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 25.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 25.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 25.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 25.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 25.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 25.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 25.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 25.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 25.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 25.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 25.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 25.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 25.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 25.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 25.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 25.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 25.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 25.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 25.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 25.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 25.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 25.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 25.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 25.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 26.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 26.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 26.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 26.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 26.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 26.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 26.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 26.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 26.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 26.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 26.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 26.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 26.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 26.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 26.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 26.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 26.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 26.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 26.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 26.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 26.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 26.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 26.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 26.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 26.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 26.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 26.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 26.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 26.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 26.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 26.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 26.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 26.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 26.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 26.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 26.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 26.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 26.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 26.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 26.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 27.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 27.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 27.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 27.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 27.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 27.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 27.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 27.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 27.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 27.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 27.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 27.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 27.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 27.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 27.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 27.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 27.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 27.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 27.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 27.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 27.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 27.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 27.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 27.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 27.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 27.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 27.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 27.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 27.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 27.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 27.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 27.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 27.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 27.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 27.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 27.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 27.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 27.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 27.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 27.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 28.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 28.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 28.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 28.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 28.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 28.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 28.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 28.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 28.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 28.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 28.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 28.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 28.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 28.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 28.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 28.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 28.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 28.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 28.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 28.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 28.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 28.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 28.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 28.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 28.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 28.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 28.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 28.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 28.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 28.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 28.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 28.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 28.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 28.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 28.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 28.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 28.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 28.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 28.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 28.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 29.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 29.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 29.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 29.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 29.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 29.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 29.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 29.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 29.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 29.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 29.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 29.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 29.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 29.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 29.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 29.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 29.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 29.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 29.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 29.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 29.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 29.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 29.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 29.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 29.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 29.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 29.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 29.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 29.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 29.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 29.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 29.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 29.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 29.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 29.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 29.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 29.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 29.
─────╯
Error: Index out of bounds. Array is of size 20, but the index is 29.
     ╭─[ test.sus:352:28 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                  ─┬─  
     │                                   ╰─── Index out of bounds. Array is of size 20, but the index is 29.
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:352:40 ]
     │
 352 │          row_products[col] = mat[row][col] * vec[col]
     │                                              ────┬───  
     │                                                  ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_8), Unknown(concrete_type_variable_9)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_235), Unknown(concrete_type_variable_236)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_462), Unknown(concrete_type_variable_463)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_689), Unknown(concrete_type_variable_690)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_916), Unknown(concrete_type_variable_917)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1143), Unknown(concrete_type_variable_1144)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1370), Unknown(concrete_type_variable_1371)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1597), Unknown(concrete_type_variable_1598)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1824), Unknown(concrete_type_variable_1825)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2051), Unknown(concrete_type_variable_2052)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2278), Unknown(concrete_type_variable_2279)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2505), Unknown(concrete_type_variable_2506)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2732), Unknown(concrete_type_variable_2733)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2959), Unknown(concrete_type_variable_2960)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3186), Unknown(concrete_type_variable_3187)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3413), Unknown(concrete_type_variable_3414)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3640), Unknown(concrete_type_variable_3641)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_3867), Unknown(concrete_type_variable_3868)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4094), Unknown(concrete_type_variable_4095)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4321), Unknown(concrete_type_variable_4322)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4548), Unknown(concrete_type_variable_4549)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4775), Unknown(concrete_type_variable_4776)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5002), Unknown(concrete_type_variable_5003)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5229), Unknown(concrete_type_variable_5230)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5456), Unknown(concrete_type_variable_5457)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5683), Unknown(concrete_type_variable_5684)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_5910), Unknown(concrete_type_variable_5911)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6137), Unknown(concrete_type_variable_6138)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6364), Unknown(concrete_type_variable_6365)]) }), Value(Integer(20))))
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }), Value(Integer(20))))
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = +Array((Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_6591), Unknown(concrete_type_variable_6592)]) }), Value(Integer(20))))
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:354:17 ]
     │
 354 │        result[row] = +row_products
     │                      ──────┬──────  
     │                            ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:359:28 ]
     │
 359 │     interface bad_cycle2 : int a -> int r
     │                            ──┬──  
     │                              ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: This instruction is part of a net-positive latency cycle of +5

_1_i'0
-> test'5 (+5)
-> _1_i'5 (+0)

Which conflicts with the starting latency
     ╭─[ test.sus:360:8 ]
     │
 360 │     state int test
     │           ────┬───  
     │               ╰───── This instruction is part of a net-positive latency cycle of +5

_1_i'0
-> test'5 (+5)
-> _1_i'5 (+0)

Which conflicts with the starting latency
─────╯
Error: Error instantiating submodule
     ╭─[ test.sus:363:9 ]
     │
 363 │     test = module_taking_time(test+a)
     │            ─────────┬────────  
     │                     ╰────────── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:363:9 ]
     │
 363 │     test = module_taking_time(test+a)
     │            ─────────┬────────  
     │                     ╰────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: This instruction is part of a net-positive latency cycle of +5

_1_i'0
-> test'5 (+5)
-> _1_i'5 (+0)

Which conflicts with the starting latency
     ╭─[ test.sus:363:9 ]
     │
 363 │     test = module_taking_time(test+a)
     │            ─────────┬────────  
     │                     ╰────────── This instruction is part of a net-positive latency cycle of +5

_1_i'0
-> test'5 (+5)
-> _1_i'5 (+0)

Which conflicts with the starting latency
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_9), Unknown(concrete_type_variable_10)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(0)), Value(Integer(1))]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) })
     ╭─[ test.sus:363:28 ]
     │
 363 │     test = module_taking_time(test+a)
     │                               ───┬──  
     │                                  ╰──── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_9), Unknown(concrete_type_variable_10)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(0)), Value(Integer(1))]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:363:28 ]
     │
 363 │     test = module_taking_time(test+a)
     │                               ───┬──  
     │                                  ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:369:45 ]
     │
 369 │     interface module_taking_a_lot_of_time : int data_in'0 -> int data_out'200
     │                                             ──────┬──────  
     │                                                   ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:369:62 ]
     │
 369 │     interface module_taking_a_lot_of_time : int data_in'0 -> int data_out'200
     │                                                              ────────┬───────  
     │                                                                      ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:375:32 ]
     │
 375 │     interface offset_latency : int i'0 -> int o'-5
     │                                ───┬───  
     │                                   ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:375:36 ]
     │
 375 │     interface offset_latency : int i'0 -> int o'-5
     │                                    ┬  
     │                                    ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:375:43 ]
     │
 375 │     interface offset_latency : int i'0 -> int o'-5
     │                                           ────┬───  
     │                                               ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:382:28 ]
     │
 382 │     interface good_cycle : int a -> int r
     │                            ──┬──  
     │                              ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(0)), Value(Integer(1))]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(0)), Value(Integer(1))]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) })
     ╭─[ test.sus:386:17 ]
     │
 386 │     int new_test = test + a
     │                    ────┬───  
     │                        ╰───── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(0)), Value(Integer(1))]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(0)), Value(Integer(1))]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:393:28 ]
     │
 393 │     interface input_only : int i
     │                            ──┬──  
     │                              ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:393:32 ]
     │
 393 │     interface input_only : int i
     │                                ┬  
     │                                ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:394:12 ]
     │
 394 │     state int loop
     │               ──┬─  
     │                 ╰─── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(0)), Value(Integer(1))]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(0)), Value(Integer(1))]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) })
     ╭─[ test.sus:396:9 ]
     │
 396 │     loop = loop + i
     │            ────┬───  
     │                ╰───── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(0)), Value(Integer(1))]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(0)), Value(Integer(1))]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:400:38 ]
     │
 400 │     interface multiple_inputs_only : int i, int i2
     │                                      ──┬──  
     │                                        ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:400:42 ]
     │
 400 │     interface multiple_inputs_only : int i, int i2
     │                                          ┬  
     │                                          ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:400:45 ]
     │
 400 │     interface multiple_inputs_only : int i, int i2
     │                                             ───┬──  
     │                                                ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:400:49 ]
     │
 400 │     interface multiple_inputs_only : int i, int i2
     │                                                 ─┬  
     │                                                  ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: This port is not strongly connected to the strongly connected port cluster 'i'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
     ╭─[ test.sus:400:49 ]
     │
 400 │     interface multiple_inputs_only : int i, int i2
     │                                          ┬      ─┬  
     │                                          ╰────────── 'i' declared here
     │                                                  │  
     │                                                  ╰── This port is not strongly connected to the strongly connected port cluster 'i'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:401:12 ]
     │
 401 │     state int loop
     │               ──┬─  
     │                 ╰─── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Failed to Typecheck Unknown(concrete_type_variable_6) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(0)), Value(Integer(1))]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) })
     ╭─[ test.sus:403:9 ]
     │
 403 │     loop = loop + i + i2
     │            ────┬───  
     │                ╰───── Failed to Typecheck Unknown(concrete_type_variable_6) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(0)), Value(Integer(1))]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(0)), Value(Integer(1))]) }) = Unknown(concrete_type_variable_6) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:403:9 ]
     │
 403 │     loop = loop + i + i2
     │            ──────┬──────  
     │                  ╰──────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(0)), Value(Integer(1))]) }) = Unknown(concrete_type_variable_6) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: {concrete_type_variable_6}
     ╭─[ test.sus:403:9 ]
     │
 403 │     loop = loop + i + i2
     │            ────┬───  
     │                ╰───── Could not finalize this type, some parameters were still unknown: {concrete_type_variable_6}
─────╯
Error: Typing Error: binary output expects a ::int #(
    MIN: 1,
    MAX: 2,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:410:9 ]
     │
 410 │     loop = loop + 1
     │            ────┬───  
     │                ╰───── Typing Error: binary output expects a ::int #(
    MIN: 1,
    MAX: 2,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: This port is not strongly connected to the strongly connected port cluster 'o'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
     ╭─[ test.sus:415:53 ]
     │
 415 │     interface multiple_outputs_only : -> int o, int o2
     │                                              ┬      ─┬  
     │                                              ╰────────── 'o' declared here
     │                                                      │  
     │                                                      ╰── This port is not strongly connected to the strongly connected port cluster 'o'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
─────╯
Error: Typing Error: binary output expects a ::int #(
    MIN: 1,
    MAX: 2,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:418:9 ]
     │
 418 │     loop = loop + 1
     │            ────┬───  
     │                ╰───── Typing Error: binary output expects a ::int #(
    MIN: 1,
    MAX: 2,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:426:27 ]
     │
 426 │     interface submodule : int a, int b -> int r
     │                           ──┬──  
     │                             ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:426:34 ]
     │
 426 │     interface submodule : int a, int b -> int r
     │                                  ──┬──  
     │                                    ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:426:43 ]
     │
 426 │     interface submodule : int a, int b -> int r
     │                                           ──┬──  
     │                                             ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:427:6 ]
     │
 427 │     r = a * b
     │         ──┬──  
     │           ╰──── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) * Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:427:6 ]
     │
 427 │     r = a * b
     │         ──┬──  
     │           ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: 'contains_submodule_submodule' conflicts with other declarations:
     ╭─[ test.sus:441:8 ]
     │
 441 │ module contains_submodule_submodule {
     │        ──────────────┬─────────────  
     │                      ╰─────────────── 'contains_submodule_submodule' conflicts with other declarations:
     │ 
 597 │ module contains_submodule_submodule {
     │        ──────────────┬─────────────  
     │                      ╰─────────────── Conflicts with
─────╯
Error: ::doNothing does not have a main interface. You should explicitly specify an interface to access
     ╭─[ test.sus:445:2 ]
     │
 431 │ module doNothing {}
     │        ────┬────  
     │            ╰────── Module 'doNothing' defined here. module ::doNothing #():
domain clk:

     │ 
 445 │     doNothing()
     │     ────┬────  
     │         ╰────── ::doNothing does not have a main interface. You should explicitly specify an interface to access
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:462:7 ]
     │
 462 │     bool b = xor(true, false)
     │          ┬  
     │          ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 888,
    MAX: 889,
) but was given a ::int #(
    MIN: 888555,
    MAX: 888556,
)
     ╭─[ test.sus:466:36 ]
     │
 466 │     interface fizz_buzz : int v -> int fb
     │                                    ───┬──  
     │                                       ╰──── Typing Error: write wire access expects a ::int #(
    MIN: 888,
    MAX: 889,
) but was given a ::int #(
    MIN: 888555,
    MAX: 888556,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 555,
    MAX: 556,
) but was given a ::int #(
    MIN: 888555,
    MAX: 888556,
)
     ╭─[ test.sus:466:36 ]
     │
 466 │     interface fizz_buzz : int v -> int fb
     │                                    ───┬──  
     │                                       ╰──── Typing Error: write wire access expects a ::int #(
    MIN: 555,
    MAX: 556,
) but was given a ::int #(
    MIN: 888555,
    MAX: 888556,
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:486:31 ]
     │
 486 │     interface fizz_buzz_gen : int v -> int fb
     │                               ──┬──  
     │                                 ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:563:24 ]
     │
 563 │     interface my_mod : int i -> bool a, bool b
     │                        ──┬──  
     │                          ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Error instantiating submodule
     ╭─[ test.sus:570:19 ]
     │
 570 │     bool x, bool y = my_mod(3)
     │                      ───┬──  
     │                         ╰──── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:577:39 ]
     │
 577 │     interface submodule_named_ports : int port_a, int port_b -> int port_c
     │                                       ─────┬────  
     │                                            ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:577:51 ]
     │
 577 │     interface submodule_named_ports : int port_a, int port_b -> int port_c
     │                                                   ─────┬────  
     │                                                        ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:577:65 ]
     │
 577 │     interface submodule_named_ports : int port_a, int port_b -> int port_c
     │                                                                 ─────┬────  
     │                                                                      ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:578:11 ]
     │
 578 │     port_c = port_a + port_b
     │              ───────┬───────  
     │                     ╰───────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_0), Unknown(concrete_type_variable_1)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:578:11 ]
     │
 578 │     port_c = port_a + port_b
     │              ───────┬───────  
     │                     ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:584:43 ]
     │
 584 │     interface use_submodule_named_ports : int i -> int o
     │                                           ──┬──  
     │                                             ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:584:52 ]
     │
 584 │     interface use_submodule_named_ports : int i -> int o
     │                                                    ──┬──  
     │                                                      ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: This port is not strongly connected to the strongly connected port cluster 'i'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
     ╭─[ test.sus:584:56 ]
     │
 584 │     interface use_submodule_named_ports : int i -> int o
     │                                               ┬        ┬  
     │                                               ╰─────────── 'i' declared here
     │                                                        │  
     │                                                        ╰── This port is not strongly connected to the strongly connected port cluster 'i'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
─────╯
Error: Error instantiating submodule
     ╭─[ test.sus:586:2 ]
     │
 586 │     submodule_named_ports sm
     │     ──────────┬──────────  
     │               ╰──────────── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:586:2 ]
     │
 586 │     submodule_named_ports sm
     │     ──────────┬──────────  
     │               ╰──────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:586:2 ]
     │
 586 │     submodule_named_ports sm
     │     ──────────┬──────────  
     │               ╰──────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:586:2 ]
     │
 586 │     submodule_named_ports sm
     │     ──────────┬──────────  
     │               ╰──────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: 'contains_submodule_submodule' conflicts with other declarations:
     ╭─[ test.sus:597:8 ]
     │
 441 │ module contains_submodule_submodule {
     │        ──────────────┬─────────────  
     │                      ╰─────────────── Conflicts with
     │ 
 597 │ module contains_submodule_submodule {
     │        ──────────────┬─────────────  
     │                      ╰─────────────── 'contains_submodule_submodule' conflicts with other declarations:
─────╯
Error: ::doNothing does not have a main interface. You should explicitly specify an interface to access
     ╭─[ test.sus:601:2 ]
     │
 431 │ module doNothing {}
     │        ────┬────  
     │            ╰────── Module 'doNothing' defined here. module ::doNothing #():
domain clk:

     │ 
 601 │     doNothing()
     │     ────┬────  
     │         ╰────── ::doNothing does not have a main interface. You should explicitly specify an interface to access
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:608:22 ]
     │
 608 │     interface in : bool i'0
     │                         ┬  
     │                         ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:613:17 ]
     │
 613 │     interface in : int i'0
     │                    ───┬───  
     │                       ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:613:21 ]
     │
 613 │     interface in : int i'0
     │                        ┬  
     │                        ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:619:31 ]
     │
 619 │     interface in : bool[20][512] i'0
     │                                  ┬  
     │                                  ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:625:39 ]
     │
 625 │     interface offset_backwards : bool i'0 -> bool o'-5
     │                                       ┬  
     │                                       ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: This compile-time constant contains Unset
     ╭─[ test.sus:630:8 ]
     │
 630 │     state bool[20][512] mem
     │           ────────┬────────  
     │                   ╰────────── This compile-time constant contains Unset
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:632:50 ]
     │
 632 │     interface write : bool write, bool[20] wr_data, int wr_addr
     │                                                     ─────┬─────  
     │                                                          ╰─────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:634:30 ]
     │
 634 │     interface read : bool read, int rd_addr -> bool[20] rd_data
     │                                 ─────┬─────  
     │                                      ╰─────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:648:29 ]
     │
 648 │     interface use_fifo : -> int o
     │                             ──┬──  
     │                               ╰──── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Pre-emptive error because latency-unspecified 'o' is never written to. 
(This is because work-in-progress code would get a lot of latency counting errors while unfinished)
     ╭─[ test.sus:648:33 ]
     │
 648 │     interface use_fifo : -> int o
     │                                 ┬  
     │                                 ╰── Pre-emptive error because latency-unspecified 'o' is never written to. 
(This is because work-in-progress code would get a lot of latency counting errors while unfinished)
─────╯
Error: Could not fully instantiate ::FIFO #(
    T: type ::bool #()[20],
    DEPTH: /* Could not infer */
    READY_SLACK: /* Could not infer */
)
     ╭─[ test.sus:649:7 ]
     │
 649 │     FIFO fiii
     │          ──┬─  
     │            ╰─── Could not fully instantiate ::FIFO #(
    T: type ::bool #()[20],
    DEPTH: /* Could not infer */
    READY_SLACK: /* Could not infer */
)
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:651:11 ]
     │
 651 │     bool[20] data
     │              ──┬─  
     │                ╰─── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:653:7 ]
     │
 653 │     bool valid, bool[20] data2 = fiii.pop(true)
     │          ──┬──  
     │            ╰──── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:653:23 ]
     │
 653 │     bool valid, bool[20] data2 = fiii.pop(true)
     │                          ──┬──  
     │                            ╰──── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:659:39 ]
     │
 659 │     interface test_separated_domain : int main
     │                                       ────┬───  
     │                                           ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:659:43 ]
     │
 659 │     interface test_separated_domain : int main
     │                                           ──┬─  
     │                                             ╰─── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:660:2 ]
     │
 660 │     int domain2
     │     ─────┬─────  
     │          ╰─────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:660:6 ]
     │
 660 │     int domain2
     │         ───┬───  
     │            ╰───── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:662:2 ]
     │
 662 │     int domain3
     │     ─────┬─────  
     │          ╰─────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:662:6 ]
     │
 662 │     int domain3
     │         ───┬───  
     │            ╰───── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:664:2 ]
     │
 664 │     int domain4
     │     ─────┬─────  
     │          ╰─────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:664:6 ]
     │
 664 │     int domain4
     │         ───┬───  
     │            ╰───── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Error instantiating submodule
     ╭─[ test.sus:666:2 ]
     │
 666 │     cross_int ci
     │     ────┬────  
     │         ╰────── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:666:2 ]
     │
 666 │     cross_int ci
     │     ────┬────  
     │         ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:666:2 ]
     │
 666 │     cross_int ci
     │     ────┬────  
     │         ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:670:2 ]
     │
 670 │     int domain5
     │     ─────┬─────  
     │          ╰─────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:670:6 ]
     │
 670 │     int domain5
     │         ───┬───  
     │            ╰───── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:672:26 ]
     │
 672 │     int #(MIN: 0, MAX: 199) my_int
     │                             ───┬──  
     │                                ╰──── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: ::no_port_module does not have a main interface. You should explicitly specify an interface to access
     ╭─[ test.sus:678:2 ]
     │
 675 │ module no_port_module {}
     │        ───────┬──────  
     │               ╰──────── Module 'no_port_module' defined here. module ::no_port_module #():
domain clk:

     │ 
 678 │     no_port_module()
     │     ───────┬──────  
     │            ╰──────── ::no_port_module does not have a main interface. You should explicitly specify an interface to access
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:681:6 ]
     │
 681 │     int x = no_port()
     │         ┬  
     │         ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: ::no_port_module does not have a main interface. You should explicitly specify an interface to access
     ╭─[ test.sus:681:10 ]
     │
 675 │ module no_port_module {}
     │        ───────┬──────  
     │               ╰──────── Module 'no_port_module' defined here. module ::no_port_module #():
domain clk:

     │ 
 681 │     int x = no_port()
     │             ───┬───  
     │                ╰───── ::no_port_module does not have a main interface. You should explicitly specify an interface to access
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:686:21 ]
     │
 686 │        interface v : int a -> int b
     │                          ┬  
     │                          ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:691:6 ]
     │
 691 │     int a
     │         ┬  
     │         ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:693:10 ]
     │
 693 │     gen int b
     │             ┬  
     │             ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: This value is non-generative, yet it is being assigned to a generative value
     ╭─[ test.sus:701:6 ]
     │
 701 │     b = a
     │     ┬   ┬  
     │     ╰────── This object is generative
     │         │  
     │         ╰── This value is non-generative, yet it is being assigned to a generative value
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:705:2 ]
     │
 705 │     mod_with_unused_interface mm
     │     ────────────┬────────────  
     │                 ╰────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Port 'a' is used, but the instantiated module has this port disabled
     ╭─[ test.sus:707:5 ]
     │
 686 │        interface v : int a -> int b
     │                          ┬  
     │                          ╰── Port 'a' declared here
     │ 
 705 │     mod_with_unused_interface mm
     │                               ─┬  
     │                                ╰── mm declared here
     │ 
 707 │     mm.a
     │        ┬  
     │        ╰── Port 'a' is used, but the instantiated module has this port disabled
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:723:34 ]
     │
 723 │     interface start : bool start'0, int upTo'0
     │                                     ─────┬────  
     │                                          ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: This compile-time constant contains Unset
     ╭─[ test.sus:727:40 ]
     │
 727 │     interface iter : -> bool valid, state int index
     │                                           ────┬────  
     │                                               ╰────── This compile-time constant contains Unset
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:727:40 ]
     │
 727 │     interface iter : -> bool valid, state int index
     │                                           ────┬────  
     │                                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Error instantiating submodule
     ╭─[ test.sus:732:2 ]
     │
 732 │     cross_int upTo_cr
     │     ────┬────  
     │         ╰────── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:732:2 ]
     │
 732 │     cross_int upTo_cr
     │     ────┬────  
     │         ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:732:2 ]
     │
 732 │     cross_int upTo_cr
     │     ────┬────  
     │         ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_17), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_17), Unknown(concrete_type_variable_3)]) }) - Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(1)), Value(Integer(2))]) })
     ╭─[ test.sus:741:11 ]
     │
 741 │        index = index - 1
     │                ────┬────  
     │                    ╰────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_17), Unknown(concrete_type_variable_3)]) }) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_17), Unknown(concrete_type_variable_3)]) }) - Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Value(Integer(1)), Value(Integer(2))]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:741:11 ]
     │
 741 │        index = index - 1
     │                ────┬────  
     │                    ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:750:30 ]
     │
 750 │     interface sumUpTo : bool start
     │                              ──┬──  
     │                                ╰──── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Error instantiating submodule
     ╭─[ test.sus:752:2 ]
     │
 752 │     sequenceDownFrom sdf
     │     ────────┬───────  
     │             ╰───────── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:752:2 ]
     │
 752 │     sequenceDownFrom sdf
     │     ────────┬───────  
     │             ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:756:7 ]
     │
 756 │     bool re = sdf.ready
     │          ─┬  
     │           ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:758:7 ]
     │
 758 │     bool iter_valid, int iter_index = sdf.iter()
     │          ─────┬────  
     │               ╰────── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:758:19 ]
     │
 758 │     bool iter_valid, int iter_index = sdf.iter()
     │                      ───────┬──────  
     │                             ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:758:23 ]
     │
 758 │     bool iter_valid, int iter_index = sdf.iter()
     │                          ─────┬────  
     │                               ╰────── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:760:3 ]
     │
 760 │        int idx = iter_index
     │        ───┬───  
     │           ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:760:7 ]
     │
 760 │        int idx = iter_index
     │            ─┬─  
     │             ╰─── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:763:2 ]
     │
 763 │     int beep
     │     ────┬───  
     │         ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:763:6 ]
     │
 763 │     int beep
     │         ──┬─  
     │           ╰─── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:766:22 ]
     │
 766 │ module test #(T, int MY_INPUT) {
     │                      ────┬───  
     │                          ╰───── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: beep is not a valid template argument of ::int
     ╭─[ test.sus:767:30 ]
     │
 767 │     interface test : ::int #(beep: 20 > 3, BEEP: int) ab
     │                              ──┬─  
     │                                ╰─── beep is not a valid template argument of ::int
     │
     ├─[ core.sus:31:20 ]
     │
  31 │ __builtin__ struct int #(int MIN, int MAX) {}
     │                    ─┬─  
     │                     ╰─── 'int' defined here
─────╯
Error: BEEP is not a valid template argument of ::int
     ╭─[ test.sus:767:44 ]
     │
 767 │     interface test : ::int #(beep: 20 > 3, BEEP: int) ab
     │                                            ──┬─  
     │                                              ╰─── BEEP is not a valid template argument of ::int
     │
     ├─[ core.sus:31:20 ]
     │
  31 │ __builtin__ struct int #(int MIN, int MAX) {}
     │                    ─┬─  
     │                     ╰─── 'int' defined here
─────╯
Error: ::int is not a named wire: local or constant, it is a Struct instead!
     ╭─[ test.sus:767:50 ]
     │
 767 │     interface test : ::int #(beep: 20 > 3, BEEP: int) ab
     │                                                  ─┬─  
     │                                                   ╰─── ::int is not a named wire: local or constant, it is a Struct instead!
     │
     ├─[ core.sus:31:20 ]
     │
  31 │ __builtin__ struct int #(int MIN, int MAX) {}
     │                    ─┬─  
     │                     ╰─── Defined here
─────╯
Error: Could not fully figure out the type of this object. type_variable_7[...peano_variable_8]
     ╭─[ test.sus:767:50 ]
     │
 767 │     interface test : ::int #(beep: 20 > 3, BEEP: int) ab
     │                                                  ─┬─  
     │                                                   ╰─── Could not fully figure out the type of this object. type_variable_7[...peano_variable_8]
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:767:55 ]
     │
 767 │     interface test : ::int #(beep: 20 > 3, BEEP: int) ab
     │                                                       ─┬  
     │                                                        ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: 'MY_INPUT' is read-only
     ╭─[ test.sus:769:2 ]
     │
 766 │ module test #(T, int MY_INPUT) {
     │                      ────┬───  
     │                          ╰───── 'MY_INPUT' declared here
     │ 
 769 │     MY_INPUT = 3
     │     ────┬───  
     │         ╰───── 'MY_INPUT' is read-only
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:771:12 ]
     │
 771 │     input int beep
     │               ──┬─  
     │                 ╰─── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: 'beep' is read-only
     ╭─[ test.sus:773:2 ]
     │
 771 │     input int beep
     │               ──┬─  
     │                 ╰─── 'beep' declared here
     │ 
 773 │     beep = 3
     │     ──┬─  
     │       ╰─── 'beep' is read-only
─────╯
Error: Could not fully figure out the type of this object. type_variable_15[...peano_variable_16]
     ╭─[ test.sus:775:2 ]
     │
 775 │     FIFO #(BITWIDTH: 4) badoop
     │     ─────────┬─────────  
     │              ╰─────────── Could not fully figure out the type of this object. type_variable_15[...peano_variable_16]
─────╯
Error: BITWIDTH is not a valid template argument of ::FIFO
     ╭─[ test.sus:775:9 ]
     │
 775 │     FIFO #(BITWIDTH: 4) badoop
     │            ────┬───  
     │                ╰───── BITWIDTH is not a valid template argument of ::FIFO
     │
     ├─[ util.sus:22:8 ]
     │
  22 │ module FIFO #(
     │        ──┬─  
     │          ╰─── 'FIFO' defined here
─────╯
Error: Could not fully figure out the type of this object. type_variable_1[...peano_variable_1]
     ╭─[ test.sus:779:2 ]
     │
 779 │     test #(MY_INPUT: 3) test_mod
     │     ─────────┬─────────  
     │              ╰─────────── Could not fully figure out the type of this object. type_variable_1[...peano_variable_1]
─────╯
Warning: Unused port 'o'
     ╭─[ test.sus:791:2 ]
     │
 786 │     output int o = beep
     │                ┬  
     │                ╰── Port 'o' declared here
     │ 
 791 │     tinyTestMod #(beep: 3) a
     │     ───────────┬────────── ┬  
     │                ╰────────────── Unused port 'o'
     │                            │  
     │                            ╰── a declared here
─────╯
Warning: Unused port 'o'
     ╭─[ test.sus:792:2 ]
     │
 786 │     output int o = beep
     │                ┬  
     │                ╰── Port 'o' declared here
     │ 
 792 │     tinyTestMod #(beep: 4) b
     │     ───────────┬────────── ┬  
     │                ╰────────────── Unused port 'o'
     │                            │  
     │                            ╰── b declared here
─────╯
Warning: Unused port 'o'
     ╭─[ test.sus:793:2 ]
     │
 786 │     output int o = beep
     │                ┬  
     │                ╰── Port 'o' declared here
     │ 
 793 │     tinyTestMod #(beep: 3) c
     │     ───────────┬────────── ┬  
     │                ╰────────────── Unused port 'o'
     │                            │  
     │                            ╰── c declared here
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[255]
     ╭─[ test.sus:799:8 ]
     │
 799 │     input int[WIDTH] values
     │           ────────┬────────  
     │                   ╰────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[255]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[15]
     ╭─[ test.sus:799:8 ]
     │
 799 │     input int[WIDTH] values
     │           ────────┬────────  
     │                   ╰────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[15]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[63]
     ╭─[ test.sus:799:8 ]
     │
 799 │     input int[WIDTH] values
     │           ────────┬────────  
     │                   ╰────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[63]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[127]
     ╭─[ test.sus:799:8 ]
     │
 799 │     input int[WIDTH] values
     │           ────────┬────────  
     │                   ╰────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[127]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[3]
     ╭─[ test.sus:799:8 ]
     │
 799 │     input int[WIDTH] values
     │           ────────┬────────  
     │                   ╰────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[3]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[7]
     ╭─[ test.sus:799:8 ]
     │
 799 │     input int[WIDTH] values
     │           ────────┬────────  
     │                   ╰────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[7]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[31]
     ╭─[ test.sus:799:8 ]
     │
 799 │     input int[WIDTH] values
     │           ────────┬────────  
     │                   ╰────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[31]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[1]
     ╭─[ test.sus:799:8 ]
     │
 799 │     input int[WIDTH] values
     │           ────────┬────────  
     │                   ╰────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[1]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:800:9 ]
     │
 800 │     output int sum
     │            ───┬───  
     │               ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:800:9 ]
     │
 800 │     output int sum
     │            ───┬───  
     │               ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:800:9 ]
     │
 800 │     output int sum
     │            ───┬───  
     │               ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:800:9 ]
     │
 800 │     output int sum
     │            ───┬───  
     │               ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:800:9 ]
     │
 800 │     output int sum
     │            ───┬───  
     │               ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:800:9 ]
     │
 800 │     output int sum
     │            ───┬───  
     │               ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:800:9 ]
     │
 800 │     output int sum
     │            ───┬───  
     │               ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:800:9 ]
     │
 800 │     output int sum
     │            ───┬───  
     │               ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:803:9 ]
     │
 803 │        sum = values[0]
     │              ────┬────  
     │                  ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Error instantiating submodule
     ╭─[ test.sus:806:3 ]
     │
 806 │        tree_add #(WIDTH: HALF_WIDTH) left
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[127]
     ╭─[ test.sus:806:3 ]
     │
 806 │        tree_add #(WIDTH: HALF_WIDTH) left
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[127]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:806:3 ]
     │
 806 │        tree_add #(WIDTH: HALF_WIDTH) left
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Error instantiating submodule
     ╭─[ test.sus:806:3 ]
     │
 806 │        tree_add #(WIDTH: HALF_WIDTH) left
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[7]
     ╭─[ test.sus:806:3 ]
     │
 806 │        tree_add #(WIDTH: HALF_WIDTH) left
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[7]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:806:3 ]
     │
 806 │        tree_add #(WIDTH: HALF_WIDTH) left
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Error instantiating submodule
     ╭─[ test.sus:806:3 ]
     │
 806 │        tree_add #(WIDTH: HALF_WIDTH) left
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[31]
     ╭─[ test.sus:806:3 ]
     │
 806 │        tree_add #(WIDTH: HALF_WIDTH) left
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[31]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:806:3 ]
     │
 806 │        tree_add #(WIDTH: HALF_WIDTH) left
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Error instantiating submodule
     ╭─[ test.sus:806:3 ]
     │
 806 │        tree_add #(WIDTH: HALF_WIDTH) left
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[63]
     ╭─[ test.sus:806:3 ]
     │
 806 │        tree_add #(WIDTH: HALF_WIDTH) left
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[63]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:806:3 ]
     │
 806 │        tree_add #(WIDTH: HALF_WIDTH) left
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Error instantiating submodule
     ╭─[ test.sus:806:3 ]
     │
 806 │        tree_add #(WIDTH: HALF_WIDTH) left
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[1]
     ╭─[ test.sus:806:3 ]
     │
 806 │        tree_add #(WIDTH: HALF_WIDTH) left
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[1]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:806:3 ]
     │
 806 │        tree_add #(WIDTH: HALF_WIDTH) left
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Error instantiating submodule
     ╭─[ test.sus:806:3 ]
     │
 806 │        tree_add #(WIDTH: HALF_WIDTH) left
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[3]
     ╭─[ test.sus:806:3 ]
     │
 806 │        tree_add #(WIDTH: HALF_WIDTH) left
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[3]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:806:3 ]
     │
 806 │        tree_add #(WIDTH: HALF_WIDTH) left
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Error instantiating submodule
     ╭─[ test.sus:806:3 ]
     │
 806 │        tree_add #(WIDTH: HALF_WIDTH) left
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[15]
     ╭─[ test.sus:806:3 ]
     │
 806 │        tree_add #(WIDTH: HALF_WIDTH) left
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[15]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:806:3 ]
     │
 806 │        tree_add #(WIDTH: HALF_WIDTH) left
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Error instantiating submodule
     ╭─[ test.sus:807:3 ]
     │
 807 │        tree_add #(WIDTH: HALF_WIDTH) right
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[127]
     ╭─[ test.sus:807:3 ]
     │
 807 │        tree_add #(WIDTH: HALF_WIDTH) right
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[127]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:807:3 ]
     │
 807 │        tree_add #(WIDTH: HALF_WIDTH) right
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Error instantiating submodule
     ╭─[ test.sus:807:3 ]
     │
 807 │        tree_add #(WIDTH: HALF_WIDTH) right
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[7]
     ╭─[ test.sus:807:3 ]
     │
 807 │        tree_add #(WIDTH: HALF_WIDTH) right
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[7]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:807:3 ]
     │
 807 │        tree_add #(WIDTH: HALF_WIDTH) right
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Error instantiating submodule
     ╭─[ test.sus:807:3 ]
     │
 807 │        tree_add #(WIDTH: HALF_WIDTH) right
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[31]
     ╭─[ test.sus:807:3 ]
     │
 807 │        tree_add #(WIDTH: HALF_WIDTH) right
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[31]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:807:3 ]
     │
 807 │        tree_add #(WIDTH: HALF_WIDTH) right
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Error instantiating submodule
     ╭─[ test.sus:807:3 ]
     │
 807 │        tree_add #(WIDTH: HALF_WIDTH) right
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[63]
     ╭─[ test.sus:807:3 ]
     │
 807 │        tree_add #(WIDTH: HALF_WIDTH) right
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[63]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:807:3 ]
     │
 807 │        tree_add #(WIDTH: HALF_WIDTH) right
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Error instantiating submodule
     ╭─[ test.sus:807:3 ]
     │
 807 │        tree_add #(WIDTH: HALF_WIDTH) right
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[1]
     ╭─[ test.sus:807:3 ]
     │
 807 │        tree_add #(WIDTH: HALF_WIDTH) right
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[1]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:807:3 ]
     │
 807 │        tree_add #(WIDTH: HALF_WIDTH) right
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Error instantiating submodule
     ╭─[ test.sus:807:3 ]
     │
 807 │        tree_add #(WIDTH: HALF_WIDTH) right
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[3]
     ╭─[ test.sus:807:3 ]
     │
 807 │        tree_add #(WIDTH: HALF_WIDTH) right
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[3]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:807:3 ]
     │
 807 │        tree_add #(WIDTH: HALF_WIDTH) right
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Error instantiating submodule
     ╭─[ test.sus:807:3 ]
     │
 807 │        tree_add #(WIDTH: HALF_WIDTH) right
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[15]
     ╭─[ test.sus:807:3 ]
     │
 807 │        tree_add #(WIDTH: HALF_WIDTH) right
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[15]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:807:3 ]
     │
 807 │        tree_add #(WIDTH: HALF_WIDTH) right
     │        ──────────────┬──────────────  
     │                      ╰──────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:810:21 ]
     │
 810 │          left.values[i] = values[i]
     │                           ────┬────  
     │                               ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:811:22 ]
     │
 811 │          right.values[i] = values[i+HALF_WIDTH]
     │                            ──────────┬─────────  
     │                                      ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Failed to Typecheck Unknown(concrete_type_variable_1284) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1291), Unknown(concrete_type_variable_1292)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1295), Unknown(concrete_type_variable_1296)]) })
     ╭─[ test.sus:817:14 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                    ──────────┬─────────  
     │                              ╰─────────── Failed to Typecheck Unknown(concrete_type_variable_1284) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1291), Unknown(concrete_type_variable_1292)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_1295), Unknown(concrete_type_variable_1296)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Unknown(concrete_type_variable_1284) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:817:14 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                    ────────────────────┬───────────────────  
     │                                        ╰───────────────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Unknown(concrete_type_variable_1284) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: {concrete_type_variable_1284}
     ╭─[ test.sus:817:14 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                    ──────────┬─────────  
     │                              ╰─────────── Could not finalize this type, some parameters were still unknown: {concrete_type_variable_1284}
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:817:14 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                    ────────────────────┬───────────────────  
     │                                        ╰───────────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Failed to Typecheck Unknown(concrete_type_variable_84) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_91), Unknown(concrete_type_variable_92)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_95), Unknown(concrete_type_variable_96)]) })
     ╭─[ test.sus:817:14 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                    ──────────┬─────────  
     │                              ╰─────────── Failed to Typecheck Unknown(concrete_type_variable_84) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_91), Unknown(concrete_type_variable_92)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_95), Unknown(concrete_type_variable_96)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Unknown(concrete_type_variable_84) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:817:14 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                    ────────────────────┬───────────────────  
     │                                        ╰───────────────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Unknown(concrete_type_variable_84) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: {concrete_type_variable_84}
     ╭─[ test.sus:817:14 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                    ──────────┬─────────  
     │                              ╰─────────── Could not finalize this type, some parameters were still unknown: {concrete_type_variable_84}
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:817:14 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                    ────────────────────┬───────────────────  
     │                                        ╰───────────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Failed to Typecheck Unknown(concrete_type_variable_324) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_331), Unknown(concrete_type_variable_332)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_335), Unknown(concrete_type_variable_336)]) })
     ╭─[ test.sus:817:14 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                    ──────────┬─────────  
     │                              ╰─────────── Failed to Typecheck Unknown(concrete_type_variable_324) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_331), Unknown(concrete_type_variable_332)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_335), Unknown(concrete_type_variable_336)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Unknown(concrete_type_variable_324) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:817:14 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                    ────────────────────┬───────────────────  
     │                                        ╰───────────────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Unknown(concrete_type_variable_324) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: {concrete_type_variable_324}
     ╭─[ test.sus:817:14 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                    ──────────┬─────────  
     │                              ╰─────────── Could not finalize this type, some parameters were still unknown: {concrete_type_variable_324}
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:817:14 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                    ────────────────────┬───────────────────  
     │                                        ╰───────────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Failed to Typecheck Unknown(concrete_type_variable_644) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_651), Unknown(concrete_type_variable_652)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_655), Unknown(concrete_type_variable_656)]) })
     ╭─[ test.sus:817:14 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                    ──────────┬─────────  
     │                              ╰─────────── Failed to Typecheck Unknown(concrete_type_variable_644) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_651), Unknown(concrete_type_variable_652)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_655), Unknown(concrete_type_variable_656)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Unknown(concrete_type_variable_644) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:817:14 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                    ────────────────────┬───────────────────  
     │                                        ╰───────────────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Unknown(concrete_type_variable_644) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: {concrete_type_variable_644}
     ╭─[ test.sus:817:14 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                    ──────────┬─────────  
     │                              ╰─────────── Could not finalize this type, some parameters were still unknown: {concrete_type_variable_644}
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:817:14 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                    ────────────────────┬───────────────────  
     │                                        ╰───────────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Failed to Typecheck Unknown(concrete_type_variable_24) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_31), Unknown(concrete_type_variable_32)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_35), Unknown(concrete_type_variable_36)]) })
     ╭─[ test.sus:817:14 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                    ──────────┬─────────  
     │                              ╰─────────── Failed to Typecheck Unknown(concrete_type_variable_24) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_31), Unknown(concrete_type_variable_32)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_35), Unknown(concrete_type_variable_36)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Unknown(concrete_type_variable_24) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:817:14 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                    ────────────────────┬───────────────────  
     │                                        ╰───────────────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Unknown(concrete_type_variable_24) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: {concrete_type_variable_24}
     ╭─[ test.sus:817:14 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                    ──────────┬─────────  
     │                              ╰─────────── Could not finalize this type, some parameters were still unknown: {concrete_type_variable_24}
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:817:14 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                    ────────────────────┬───────────────────  
     │                                        ╰───────────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Failed to Typecheck Unknown(concrete_type_variable_44) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_51), Unknown(concrete_type_variable_52)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_55), Unknown(concrete_type_variable_56)]) })
     ╭─[ test.sus:817:14 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                    ──────────┬─────────  
     │                              ╰─────────── Failed to Typecheck Unknown(concrete_type_variable_44) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_51), Unknown(concrete_type_variable_52)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_55), Unknown(concrete_type_variable_56)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Unknown(concrete_type_variable_44) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:817:14 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                    ────────────────────┬───────────────────  
     │                                        ╰───────────────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Unknown(concrete_type_variable_44) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: {concrete_type_variable_44}
     ╭─[ test.sus:817:14 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                    ──────────┬─────────  
     │                              ╰─────────── Could not finalize this type, some parameters were still unknown: {concrete_type_variable_44}
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:817:14 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                    ────────────────────┬───────────────────  
     │                                        ╰───────────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Failed to Typecheck Unknown(concrete_type_variable_164) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_171), Unknown(concrete_type_variable_172)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_175), Unknown(concrete_type_variable_176)]) })
     ╭─[ test.sus:817:14 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                    ──────────┬─────────  
     │                              ╰─────────── Failed to Typecheck Unknown(concrete_type_variable_164) = Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_171), Unknown(concrete_type_variable_172)]) }) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_175), Unknown(concrete_type_variable_176)]) })
─────╯
Error: Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Unknown(concrete_type_variable_164) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
     ╭─[ test.sus:817:14 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                    ────────────────────┬───────────────────  
     │                                        ╰───────────────────── Failed to Typecheck Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_4), Unknown(concrete_type_variable_5)]) }) = Unknown(concrete_type_variable_164) + Named(ConcreteGlobalReference { id: type_1, template_args: FlatAlloc::from_vec(vec![Unknown(concrete_type_variable_2), Unknown(concrete_type_variable_3)]) })
─────╯
Error: Could not finalize this type, some parameters were still unknown: {concrete_type_variable_164}
     ╭─[ test.sus:817:14 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                    ──────────┬─────────  
     │                              ╰─────────── Could not finalize this type, some parameters were still unknown: {concrete_type_variable_164}
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:817:14 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                    ────────────────────┬───────────────────  
     │                                        ╰───────────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:817:37 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                                           ────────┬────────  
     │                                                   ╰────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:817:37 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                                           ────────┬────────  
     │                                                   ╰────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:817:37 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                                           ────────┬────────  
     │                                                   ╰────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:817:37 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                                           ────────┬────────  
     │                                                   ╰────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:817:37 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                                           ────────┬────────  
     │                                                   ╰────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:817:37 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                                           ────────┬────────  
     │                                                   ╰────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:817:37 ]
     │
 817 │          reg sum = left.sum + right.sum + values[WIDTH - 1]
     │                                           ────────┬────────  
     │                                                   ╰────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 1,
    MAX: 2,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 1,
    MAX: 2,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 2,
    MAX: 3,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 2,
    MAX: 3,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 3,
    MAX: 4,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 3,
    MAX: 4,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 4,
    MAX: 5,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 4,
    MAX: 5,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 5,
    MAX: 6,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 5,
    MAX: 6,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 6,
    MAX: 7,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 6,
    MAX: 7,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 7,
    MAX: 8,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 7,
    MAX: 8,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 8,
    MAX: 9,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 8,
    MAX: 9,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 9,
    MAX: 10,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 9,
    MAX: 10,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 10,
    MAX: 11,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 10,
    MAX: 11,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 11,
    MAX: 12,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 11,
    MAX: 12,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 12,
    MAX: 13,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 12,
    MAX: 13,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 13,
    MAX: 14,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 13,
    MAX: 14,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 14,
    MAX: 15,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 14,
    MAX: 15,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 15,
    MAX: 16,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 15,
    MAX: 16,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 16,
    MAX: 17,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 16,
    MAX: 17,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 17,
    MAX: 18,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 17,
    MAX: 18,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 18,
    MAX: 19,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 18,
    MAX: 19,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 19,
    MAX: 20,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 19,
    MAX: 20,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 20,
    MAX: 21,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 20,
    MAX: 21,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 21,
    MAX: 22,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 21,
    MAX: 22,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 22,
    MAX: 23,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 22,
    MAX: 23,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 23,
    MAX: 24,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 23,
    MAX: 24,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 24,
    MAX: 25,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 24,
    MAX: 25,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 25,
    MAX: 26,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 25,
    MAX: 26,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 26,
    MAX: 27,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 26,
    MAX: 27,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 27,
    MAX: 28,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 27,
    MAX: 28,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 28,
    MAX: 29,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 28,
    MAX: 29,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 29,
    MAX: 30,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 29,
    MAX: 30,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 30,
    MAX: 31,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 30,
    MAX: 31,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 31,
    MAX: 32,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 31,
    MAX: 32,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 32,
    MAX: 33,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 32,
    MAX: 33,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 33,
    MAX: 34,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 33,
    MAX: 34,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 34,
    MAX: 35,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 34,
    MAX: 35,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 35,
    MAX: 36,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 35,
    MAX: 36,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 36,
    MAX: 37,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 36,
    MAX: 37,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 37,
    MAX: 38,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 37,
    MAX: 38,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 38,
    MAX: 39,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 38,
    MAX: 39,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 39,
    MAX: 40,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 39,
    MAX: 40,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 40,
    MAX: 41,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 40,
    MAX: 41,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 41,
    MAX: 42,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 41,
    MAX: 42,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 42,
    MAX: 43,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 42,
    MAX: 43,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 43,
    MAX: 44,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 43,
    MAX: 44,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 44,
    MAX: 45,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 44,
    MAX: 45,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 45,
    MAX: 46,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 45,
    MAX: 46,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 46,
    MAX: 47,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 46,
    MAX: 47,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 47,
    MAX: 48,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 47,
    MAX: 48,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 48,
    MAX: 49,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 48,
    MAX: 49,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 49,
    MAX: 50,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 49,
    MAX: 50,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 50,
    MAX: 51,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 50,
    MAX: 51,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 51,
    MAX: 52,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 51,
    MAX: 52,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 52,
    MAX: 53,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 52,
    MAX: 53,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 53,
    MAX: 54,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 53,
    MAX: 54,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 54,
    MAX: 55,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 54,
    MAX: 55,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 55,
    MAX: 56,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 55,
    MAX: 56,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 56,
    MAX: 57,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 56,
    MAX: 57,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 57,
    MAX: 58,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 57,
    MAX: 58,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 58,
    MAX: 59,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 58,
    MAX: 59,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 59,
    MAX: 60,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 59,
    MAX: 60,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 60,
    MAX: 61,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 60,
    MAX: 61,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 61,
    MAX: 62,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 61,
    MAX: 62,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 62,
    MAX: 63,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 62,
    MAX: 63,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 63,
    MAX: 64,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 63,
    MAX: 64,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 64,
    MAX: 65,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 64,
    MAX: 65,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 65,
    MAX: 66,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 65,
    MAX: 66,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 66,
    MAX: 67,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 66,
    MAX: 67,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 67,
    MAX: 68,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 67,
    MAX: 68,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 68,
    MAX: 69,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 68,
    MAX: 69,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 69,
    MAX: 70,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 69,
    MAX: 70,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 70,
    MAX: 71,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 70,
    MAX: 71,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 71,
    MAX: 72,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 71,
    MAX: 72,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 72,
    MAX: 73,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 72,
    MAX: 73,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 73,
    MAX: 74,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 73,
    MAX: 74,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 74,
    MAX: 75,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 74,
    MAX: 75,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 75,
    MAX: 76,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 75,
    MAX: 76,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 76,
    MAX: 77,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 76,
    MAX: 77,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 77,
    MAX: 78,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 77,
    MAX: 78,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 78,
    MAX: 79,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 78,
    MAX: 79,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 79,
    MAX: 80,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 79,
    MAX: 80,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 80,
    MAX: 81,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 80,
    MAX: 81,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 81,
    MAX: 82,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 81,
    MAX: 82,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 82,
    MAX: 83,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 82,
    MAX: 83,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 83,
    MAX: 84,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 83,
    MAX: 84,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 84,
    MAX: 85,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 84,
    MAX: 85,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 85,
    MAX: 86,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 85,
    MAX: 86,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 86,
    MAX: 87,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 86,
    MAX: 87,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 87,
    MAX: 88,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 87,
    MAX: 88,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 88,
    MAX: 89,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 88,
    MAX: 89,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 89,
    MAX: 90,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 89,
    MAX: 90,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 90,
    MAX: 91,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 90,
    MAX: 91,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 91,
    MAX: 92,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 91,
    MAX: 92,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 92,
    MAX: 93,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 92,
    MAX: 93,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 93,
    MAX: 94,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 93,
    MAX: 94,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 94,
    MAX: 95,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 94,
    MAX: 95,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 95,
    MAX: 96,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 95,
    MAX: 96,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 96,
    MAX: 97,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 96,
    MAX: 97,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 97,
    MAX: 98,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 97,
    MAX: 98,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 98,
    MAX: 99,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 98,
    MAX: 99,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 99,
    MAX: 100,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 99,
    MAX: 100,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 100,
    MAX: 101,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 100,
    MAX: 101,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 101,
    MAX: 102,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 101,
    MAX: 102,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 102,
    MAX: 103,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 102,
    MAX: 103,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 103,
    MAX: 104,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 103,
    MAX: 104,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 104,
    MAX: 105,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 104,
    MAX: 105,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 105,
    MAX: 106,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 105,
    MAX: 106,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 106,
    MAX: 107,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 106,
    MAX: 107,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 107,
    MAX: 108,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 107,
    MAX: 108,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 108,
    MAX: 109,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 108,
    MAX: 109,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 109,
    MAX: 110,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 109,
    MAX: 110,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 110,
    MAX: 111,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 110,
    MAX: 111,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 111,
    MAX: 112,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 111,
    MAX: 112,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 112,
    MAX: 113,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 112,
    MAX: 113,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 113,
    MAX: 114,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 113,
    MAX: 114,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 114,
    MAX: 115,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 114,
    MAX: 115,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 115,
    MAX: 116,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 115,
    MAX: 116,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 116,
    MAX: 117,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 116,
    MAX: 117,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 117,
    MAX: 118,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 117,
    MAX: 118,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 118,
    MAX: 119,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 118,
    MAX: 119,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 119,
    MAX: 120,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 119,
    MAX: 120,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 120,
    MAX: 121,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 120,
    MAX: 121,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 121,
    MAX: 122,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 121,
    MAX: 122,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 122,
    MAX: 123,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 122,
    MAX: 123,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 123,
    MAX: 124,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 123,
    MAX: 124,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 124,
    MAX: 125,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 124,
    MAX: 125,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 125,
    MAX: 126,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 125,
    MAX: 126,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 126,
    MAX: 127,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 126,
    MAX: 127,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 127,
    MAX: 128,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 127,
    MAX: 128,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 128,
    MAX: 129,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 128,
    MAX: 129,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 129,
    MAX: 130,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 129,
    MAX: 130,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 130,
    MAX: 131,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 130,
    MAX: 131,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 131,
    MAX: 132,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 131,
    MAX: 132,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 132,
    MAX: 133,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 132,
    MAX: 133,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 133,
    MAX: 134,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 133,
    MAX: 134,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 134,
    MAX: 135,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 134,
    MAX: 135,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 135,
    MAX: 136,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 135,
    MAX: 136,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 136,
    MAX: 137,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 136,
    MAX: 137,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 137,
    MAX: 138,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 137,
    MAX: 138,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 138,
    MAX: 139,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 138,
    MAX: 139,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 139,
    MAX: 140,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 139,
    MAX: 140,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 140,
    MAX: 141,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 140,
    MAX: 141,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 141,
    MAX: 142,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 141,
    MAX: 142,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 142,
    MAX: 143,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 142,
    MAX: 143,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 143,
    MAX: 144,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 143,
    MAX: 144,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 144,
    MAX: 145,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 144,
    MAX: 145,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 145,
    MAX: 146,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 145,
    MAX: 146,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 146,
    MAX: 147,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 146,
    MAX: 147,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 147,
    MAX: 148,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 147,
    MAX: 148,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 148,
    MAX: 149,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 148,
    MAX: 149,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 149,
    MAX: 150,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 149,
    MAX: 150,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 150,
    MAX: 151,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 150,
    MAX: 151,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 151,
    MAX: 152,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 151,
    MAX: 152,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 152,
    MAX: 153,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 152,
    MAX: 153,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 153,
    MAX: 154,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 153,
    MAX: 154,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 154,
    MAX: 155,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 154,
    MAX: 155,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 155,
    MAX: 156,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 155,
    MAX: 156,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 156,
    MAX: 157,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 156,
    MAX: 157,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 157,
    MAX: 158,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 157,
    MAX: 158,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 158,
    MAX: 159,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 158,
    MAX: 159,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 159,
    MAX: 160,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 159,
    MAX: 160,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 160,
    MAX: 161,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 160,
    MAX: 161,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 161,
    MAX: 162,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 161,
    MAX: 162,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 162,
    MAX: 163,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 162,
    MAX: 163,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 163,
    MAX: 164,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 163,
    MAX: 164,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 164,
    MAX: 165,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 164,
    MAX: 165,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 165,
    MAX: 166,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 165,
    MAX: 166,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 166,
    MAX: 167,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 166,
    MAX: 167,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 167,
    MAX: 168,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 167,
    MAX: 168,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 168,
    MAX: 169,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 168,
    MAX: 169,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 169,
    MAX: 170,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 169,
    MAX: 170,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 170,
    MAX: 171,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 170,
    MAX: 171,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 171,
    MAX: 172,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 171,
    MAX: 172,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 172,
    MAX: 173,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 172,
    MAX: 173,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 173,
    MAX: 174,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 173,
    MAX: 174,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 174,
    MAX: 175,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 174,
    MAX: 175,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 175,
    MAX: 176,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 175,
    MAX: 176,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 176,
    MAX: 177,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 176,
    MAX: 177,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 177,
    MAX: 178,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 177,
    MAX: 178,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 178,
    MAX: 179,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 178,
    MAX: 179,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 179,
    MAX: 180,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 179,
    MAX: 180,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 180,
    MAX: 181,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 180,
    MAX: 181,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 181,
    MAX: 182,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 181,
    MAX: 182,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 182,
    MAX: 183,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 182,
    MAX: 183,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 183,
    MAX: 184,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 183,
    MAX: 184,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 184,
    MAX: 185,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 184,
    MAX: 185,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 185,
    MAX: 186,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 185,
    MAX: 186,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 186,
    MAX: 187,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 186,
    MAX: 187,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 187,
    MAX: 188,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 187,
    MAX: 188,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 188,
    MAX: 189,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 188,
    MAX: 189,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 189,
    MAX: 190,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 189,
    MAX: 190,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 190,
    MAX: 191,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 190,
    MAX: 191,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 191,
    MAX: 192,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 191,
    MAX: 192,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 192,
    MAX: 193,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 192,
    MAX: 193,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 193,
    MAX: 194,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 193,
    MAX: 194,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 194,
    MAX: 195,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 194,
    MAX: 195,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 195,
    MAX: 196,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 195,
    MAX: 196,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 196,
    MAX: 197,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 196,
    MAX: 197,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 197,
    MAX: 198,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 197,
    MAX: 198,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 198,
    MAX: 199,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 198,
    MAX: 199,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 199,
    MAX: 200,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 199,
    MAX: 200,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 200,
    MAX: 201,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 200,
    MAX: 201,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 201,
    MAX: 202,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 201,
    MAX: 202,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 202,
    MAX: 203,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 202,
    MAX: 203,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 203,
    MAX: 204,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 203,
    MAX: 204,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 204,
    MAX: 205,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 204,
    MAX: 205,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 205,
    MAX: 206,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 205,
    MAX: 206,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 206,
    MAX: 207,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 206,
    MAX: 207,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 207,
    MAX: 208,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 207,
    MAX: 208,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 208,
    MAX: 209,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 208,
    MAX: 209,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 209,
    MAX: 210,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 209,
    MAX: 210,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 210,
    MAX: 211,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 210,
    MAX: 211,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 211,
    MAX: 212,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 211,
    MAX: 212,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 212,
    MAX: 213,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 212,
    MAX: 213,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 213,
    MAX: 214,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 213,
    MAX: 214,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 214,
    MAX: 215,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 214,
    MAX: 215,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 215,
    MAX: 216,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 215,
    MAX: 216,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 216,
    MAX: 217,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 216,
    MAX: 217,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 217,
    MAX: 218,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 217,
    MAX: 218,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 218,
    MAX: 219,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 218,
    MAX: 219,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 219,
    MAX: 220,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 219,
    MAX: 220,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 220,
    MAX: 221,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 220,
    MAX: 221,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 221,
    MAX: 222,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 221,
    MAX: 222,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 222,
    MAX: 223,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 222,
    MAX: 223,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 223,
    MAX: 224,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 223,
    MAX: 224,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 224,
    MAX: 225,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 224,
    MAX: 225,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 225,
    MAX: 226,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 225,
    MAX: 226,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 226,
    MAX: 227,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 226,
    MAX: 227,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 227,
    MAX: 228,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 227,
    MAX: 228,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 228,
    MAX: 229,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 228,
    MAX: 229,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 229,
    MAX: 230,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 229,
    MAX: 230,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 230,
    MAX: 231,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 230,
    MAX: 231,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 231,
    MAX: 232,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 231,
    MAX: 232,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 232,
    MAX: 233,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 232,
    MAX: 233,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 233,
    MAX: 234,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 233,
    MAX: 234,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 234,
    MAX: 235,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 234,
    MAX: 235,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 235,
    MAX: 236,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 235,
    MAX: 236,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 236,
    MAX: 237,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 236,
    MAX: 237,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 237,
    MAX: 238,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 237,
    MAX: 238,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 238,
    MAX: 239,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 238,
    MAX: 239,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 239,
    MAX: 240,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 239,
    MAX: 240,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 240,
    MAX: 241,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 240,
    MAX: 241,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 241,
    MAX: 242,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 241,
    MAX: 242,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 242,
    MAX: 243,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 242,
    MAX: 243,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 243,
    MAX: 244,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 243,
    MAX: 244,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 244,
    MAX: 245,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 244,
    MAX: 245,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 245,
    MAX: 246,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 245,
    MAX: 246,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 246,
    MAX: 247,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 246,
    MAX: 247,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 247,
    MAX: 248,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 247,
    MAX: 248,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 248,
    MAX: 249,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 248,
    MAX: 249,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 249,
    MAX: 250,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 249,
    MAX: 250,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 250,
    MAX: 251,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 250,
    MAX: 251,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 251,
    MAX: 252,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 251,
    MAX: 252,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 252,
    MAX: 253,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 252,
    MAX: 253,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 253,
    MAX: 254,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 253,
    MAX: 254,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 254,
    MAX: 255,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
     ╭─[ test.sus:825:2 ]
     │
 825 │     int[SIZE] vs
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 254,
    MAX: 255,
) but was given a ::int #(
    MIN: 0,
    MAX: 1,
)
─────╯
Error: Error instantiating submodule
     ╭─[ test.sus:831:2 ]
     │
 831 │     tree_add #(WIDTH: SIZE) tr
     │     ───────────┬───────────  
     │                ╰───────────── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:831:2 ]
     │
 831 │     tree_add #(WIDTH: SIZE) tr
     │     ───────────┬───────────  
     │                ╰───────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:835:9 ]
     │
 835 │     output int beep = tr.sum
     │            ────┬───  
     │                ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not fully instantiate ::replicate #(
    T: type ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[30],
    NUM_REPLS: 20,
)
     ╭─[ test.sus:851:46 ]
     │
 851 │     replicate #(NUM_REPLS: 20, T: type int[30]) b
     │                                                 ┬  
     │                                                 ╰── Could not fully instantiate ::replicate #(
    T: type ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[30],
    NUM_REPLS: 20,
)
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:854:6 ]
     │
 854 │     int val = 3
     │         ─┬─  
     │          ╰─── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:857:10 ]
     │
 857 │     int[30] out = c.result
     │             ─┬─  
     │              ╰─── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:869:13 ]
     │
 869 │     gen int[8] SOURCES = [3, 2, 4, 5, 1, 2, 7, 6]
     │                ───┬───  
     │                   ╰───── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: 786823,
    MAX: 786824,
) but was given a ::int #(
    MIN: 2387,
    MAX: 2388,
)
     ╭─[ test.sus:871:2 ]
     │
 871 │     int[2] inArr
     │     ──────┬─────  
     │           ╰─────── Typing Error: write wire access expects a ::int #(
    MIN: 786823,
    MAX: 786824,
) but was given a ::int #(
    MIN: 2387,
    MAX: 2388,
)
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:871:9 ]
     │
 871 │     int[2] inArr
     │            ──┬──  
     │              ╰──── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:878:9 ]
     │
 878 │     int[8] beep = permut.permute(SOURCES)
     │            ──┬─  
     │              ╰─── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:882:28 ]
     │
 882 │     interface from : bool[32] instr
     │                               ──┬──  
     │                                 ╰──── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:890:42 ]
     │
 890 │     interface run_instruction : bool[32] instr
     │                                          ──┬──  
     │                                            ╰──── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Excess output targets. Function returns 0 results, but 1 targets were given.
     ╭─[ test.sus:894:7 ]
     │
 883 │     interface is_jump
     │               ───┬───  
     │                  ╰───── Interface 'is_jump' defined here
     │ 
 894 │     when decoder.is_jump() : int target_addr {
     │          ────────┬────────  
     │                  ╰────────── Excess output targets. Function returns 0 results, but 1 targets were given.
─────╯
Error: While parsing 'if_statement', parser found a syntax error in a node of type 'ERROR'
     ╭─[ test.sus:894:25 ]
     │
 894 │ ╭─▶     when decoder.is_jump() : int target_addr {
     │ │                              ────────┬────────  
     │ │                                      ╰────────── While parsing 'if_statement', parser found a syntax error in a node of type 'ERROR'
     ┆ ┆   
 896 │ ├─▶     }
     │ │           
     │ ╰─────────── Parent node 'if_statement'
─────╯
Error: Excess output targets. Function returns 0 results, but 1 targets were given.
     ╭─[ test.sus:897:7 ]
     │
 884 │     interface is_load
     │               ───┬───  
     │                  ╰───── Interface 'is_load' defined here
     │ 
 897 │     when decoder.is_load() : int reg_to, int addr {
     │          ────────┬────────  
     │                  ╰────────── Excess output targets. Function returns 0 results, but 1 targets were given.
─────╯
Error: While parsing 'if_statement', parser found a syntax error in a node of type 'ERROR'
     ╭─[ test.sus:897:25 ]
     │
 897 │ ╭─▶     when decoder.is_load() : int reg_to, int addr {
     │ │                              ───────────┬──────────  
     │ │                                         ╰──────────── While parsing 'if_statement', parser found a syntax error in a node of type 'ERROR'
     ┆ ┆   
 899 │ ├─▶     }
     │ │           
     │ ╰─────────── Parent node 'if_statement'
─────╯
Warning: Used 'when' in a generative context, use 'if' instead
     ╭─[ test.sus:900:2 ]
     │
 900 │     when decoder.is_arith() : int reg_a, int reg_b, Operator op {
     │     ──┬─  
     │       ╰─── Used 'when' in a generative context, use 'if' instead
─────╯
Error: While parsing 'if_statement', parser found a syntax error in a node of type 'ERROR'
     ╭─[ test.sus:900:7 ]
     │
 900 │ ╭─▶     when decoder.is_arith() : int reg_a, int reg_b, Operator op {
     │ │            ─────────────────────────┬─────────────────────────  
     │ │                                     ╰─────────────────────────── While parsing 'if_statement', parser found a syntax error in a node of type 'ERROR'
     ┆ ┆   
 902 │ ├─▶     }
     │ │           
     │ ╰─────────── Parent node 'if_statement'
─────╯
Error: No Global of the name 'op' was found. Did you forget to import it?
     ╭─[ test.sus:900:59 ]
     │
 900 │     when decoder.is_arith() : int reg_a, int reg_b, Operator op {
     │                                                              ─┬  
     │                                                               ╰── No Global of the name 'op' was found. Did you forget to import it?
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:913:6 ]
     │
 913 │     int x = no_interface_named()
     │         ┬  
     │         ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: ::no_main_interface does not have a main interface. You should explicitly specify an interface to access
     ╭─[ test.sus:913:10 ]
     │
 906 │ module no_main_interface {
     │        ────────┬────────  
     │                ╰────────── Module 'no_main_interface' defined here. module ::no_main_interface #():
domain clk:

     │ 
 913 │     int x = no_interface_named()
     │             ─────────┬────────  
     │                      ╰────────── ::no_main_interface does not have a main interface. You should explicitly specify an interface to access
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:914:6 ]
     │
 914 │     int y = no_main_interface()
     │         ┬  
     │         ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: ::no_main_interface does not have a main interface. You should explicitly specify an interface to access
     ╭─[ test.sus:914:10 ]
     │
 906 │ module no_main_interface {
     │        ────────┬────────  
     │                ╰────────── Module 'no_main_interface' defined here. module ::no_main_interface #():
domain clk:

     │ 
 914 │     int y = no_main_interface()
     │             ────────┬────────  
     │                     ╰────────── ::no_main_interface does not have a main interface. You should explicitly specify an interface to access
─────╯
Error: Typing Error: array size expects a ::int but was given a ::bool
     ╭─[ test.sus:918:6 ]
     │
 918 │     int[true] a
     │         ──┬─  
     │           ╰─── Typing Error: array size expects a ::int but was given a ::bool
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:918:12 ]
     │
 918 │     int[true] a
     │               ┬  
     │               ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Typing Error: array size expects a ::int but was given a ::bool
     ╭─[ test.sus:922:41 ]
     │
 922 │     interface moduleWithBadInterface : int[true] a
     │                                            ──┬─  
     │                                              ╰─── Typing Error: array size expects a ::int but was given a ::bool
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:922:47 ]
     │
 922 │     interface moduleWithBadInterface : int[true] a
     │                                                  ┬  
     │                                                  ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:926:9 ]
     │
 926 │     int[3] xyz
     │            ─┬─  
     │             ╰─── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Typing Error: variable reference expects a ::int but was given a ::bool
     ╭─[ test.sus:929:2 ]
     │
 929 │     xyz[3] = true
     │     ───┬──  
     │        ╰──── Typing Error: variable reference expects a ::int but was given a ::bool
─────╯
Error: While parsing 'block', parser found a syntax error in a node of type 'ERROR'
     ╭─[ test.sus:935:2 ]
     │
 933 │ ╭─▶ const int SUM_UP #(int SIZE, int[SIZE] DATA) {
     ┆ ┆   
 935 │ │       for I in 0..SIZE {
     │ │       ────────┬───────  
     │ │               ╰───────── While parsing 'block', parser found a syntax error in a node of type 'ERROR'
     ┆ ┆   
 938 │ ├─▶ }
     │ │       
     │ ╰─────── Parent node 'block'
─────╯
Error: No Global of the name 'I' was found. Did you forget to import it?
     ╭─[ test.sus:936:29 ]
     │
 936 │         SUM_UP = SUM_UP + DATA[I]
     │                                ┬  
     │                                ╰── No Global of the name 'I' was found. Did you forget to import it?
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:943:13 ]
     │
 943 │     gen int[5] DATA
     │                ──┬─  
     │                  ╰─── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:950:10 ]
     │
 950 │     gen int X = SUM_UP #(SIZE: 4, DATA, BEEEP: 3)
     │             ┬  
     │             ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: BEEEP is not a valid template argument of ::SUM_UP
     ╭─[ test.sus:950:38 ]
     │
 933 │ const int SUM_UP #(int SIZE, int[SIZE] DATA) {
     │           ───┬──  
     │              ╰──── 'SUM_UP' defined here
     │ 
 950 │     gen int X = SUM_UP #(SIZE: 4, DATA, BEEEP: 3)
     │                                         ──┬──  
     │                                           ╰──── BEEEP is not a valid template argument of ::SUM_UP
─────╯
Error: ABC is not a valid template argument of ::int
     ╭─[ test.sus:952:8 ]
     │
 952 │     int #(ABC) x
     │           ─┬─  
     │            ╰─── ABC is not a valid template argument of ::int
     │
     ├─[ core.sus:31:20 ]
     │
  31 │ __builtin__ struct int #(int MIN, int MAX) {}
     │                    ─┬─  
     │                     ╰─── 'int' defined here
─────╯
Error: ABC does not name a Type or a Value.
     ╭─[ test.sus:952:8 ]
     │
 952 │     int #(ABC) x
     │           ─┬─  
     │            ╰─── ABC does not name a Type or a Value.
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:952:13 ]
     │
 952 │     int #(ABC) x
     │                ┬  
     │                ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[5]
     ╭─[ test.sus:956:2 ]
     │
 956 │     int[5] a
     │     ────┬───  
     │         ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[5]
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:956:9 ]
     │
 956 │     int[5] a
     │            ┬  
     │            ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[5]
     ╭─[ test.sus:958:2 ]
     │
 958 │     CrossDomain cr
     │     ─────┬─────  
     │          ╰─────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[5]
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[5]
     ╭─[ test.sus:958:2 ]
     │
 958 │     CrossDomain cr
     │     ─────┬─────  
     │          ╰─────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[5]
─────╯
Error: Could not fully instantiate ::CrossDomain #(
    T: type ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[5],
)
     ╭─[ test.sus:958:14 ]
     │
 958 │     CrossDomain cr
     │                 ─┬  
     │                  ╰── Could not fully instantiate ::CrossDomain #(
    T: type ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[5],
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[5]
     ╭─[ test.sus:961:2 ]
     │
 961 │     int[5] b = cr.out
     │     ────┬───  
     │         ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[5]
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:961:9 ]
     │
 961 │     int[5] b = cr.out
     │            ┬  
     │            ╰── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:965:9 ]
     │
 965 │     int[5] arr
     │            ─┬─  
     │             ╰─── Unused Variable: This variable does not affect the output ports of this module
─────╯
Error: Error instantiating submodule
     ╭─[ test.sus:973:2 ]
     │
 973 │     TreeAdd adder
     │     ───┬───  
     │        ╰───── Error instantiating submodule
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:973:2 ]
     │
 973 │     TreeAdd adder
     │     ───┬───  
     │        ╰───── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
     ╭─[ test.sus:974:2 ]
     │
 974 │     int total = adder(arr)
     │     ────┬────  
     │         ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
     ╭─[ test.sus:974:6 ]
     │
 974 │     int total = adder(arr)
     │         ──┬──  
     │           ╰──── Unused Variable: This variable does not affect the output ports of this module
─────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1006:12 ]
      │
 1006 │     input int bad_port
      │               ────┬───  
      │                   ╰───── Unused Variable: This variable does not affect the output ports of this module
──────╯
Error: When using explicit domains, no port is allowed to be declared on the implicit 'clk' domain.
      ╭─[ test.sus:1008:2 ]
      │
 1006 │     input int bad_port
      │           ──────┬─────  
      │                 ╰─────── A domain should be explicitly defined before this port
      │ 
 1008 │     domain bad_domain
      │     ────────┬────────  
      │             ╰────────── When using explicit domains, no port is allowed to be declared on the implicit 'clk' domain.
──────╯
Error: This declaration conflicts with a previous declaration in the same scope
      ╭─[ test.sus:1015:12 ]
      │
 1014 │     domain my_domain
      │            ────┬────  
      │                ╰────── Domain 'my_domain' declared here
 1015 │     input int my_domain
      │               ────┬────  
      │                   ╰────── This declaration conflicts with a previous declaration in the same scope
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1015:12 ]
      │
 1015 │     input int my_domain
      │               ────┬────  
      │                   ╰────── Unused Variable: This variable does not affect the output ports of this module
──────╯
Error: Conflicting domain declaration. Domain 'my_domain' was already declared earlier
      ╭─[ test.sus:1017:9 ]
      │
 1014 │     domain my_domain
      │            ────┬────  
      │                ╰────── Domain 'my_domain' declared here
      │ 
 1017 │     domain my_domain
      │            ────┬────  
      │                ╰────── Conflicting domain declaration. Domain 'my_domain' was already declared earlier
──────╯
Error: Could not fully figure out the type of this object. type_variable_0[...peano_variable_0]
      ╭─[ test.sus:1027:2 ]
      │
 1027 │     make_infinite_type_help mtinf
      │     ───────────┬───────────  
      │                ╰───────────── Could not fully figure out the type of this object. type_variable_0[...peano_variable_0]
──────╯
Error: Could not fully figure out the type of this object. type_variable_0[...peano_variable_0]
      ╭─[ test.sus:1029:2 ]
      │
 1029 │     mtinf.a = mtinf.b
      │     ───┬───  
      │        ╰───── Could not fully figure out the type of this object. type_variable_0[...peano_variable_0]
──────╯
Error: Typing Error: variable reference: Creating Infinite Types is Forbidden! expects a type_variable_0[][...peano_variable_0] but was given a type_variable_0[...peano_variable_0]
      ╭─[ test.sus:1029:2 ]
      │
 1029 │     mtinf.a = mtinf.b
      │     ───┬───  
      │        ╰───── Typing Error: variable reference: Creating Infinite Types is Forbidden! expects a type_variable_0[][...peano_variable_0] but was given a type_variable_0[...peano_variable_0]
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1036:8 ]
      │
 1036 │        bool do_write'0,
      │             ────┬───  
      │                 ╰───── Unused Variable: This variable does not affect the output ports of this module
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1037:3 ]
      │
 1037 │        int addr'0,
      │        ─────┬────  
      │             ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1038:13 ]
      │
 1038 │        bool[500] data'0 ->
      │                  ──┬─  
      │                    ╰─── Unused Variable: This variable does not affect the output ports of this module
──────╯
Error: Error instantiating submodule
      ╭─[ test.sus:1041:2 ]
      │
 1041 │     DualPortMem #(SIZE: 128, T: type bool[500]) mem
      │     ─────────────────────┬─────────────────────  
      │                          ╰─────────────────────── Error instantiating submodule
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1041:2 ]
      │
 1041 │     DualPortMem #(SIZE: 128, T: type bool[500]) mem
      │     ─────────────────────┬─────────────────────  
      │                          ╰─────────────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1041:2 ]
      │
 1041 │     DualPortMem #(SIZE: 128, T: type bool[500]) mem
      │     ─────────────────────┬─────────────────────  
      │                          ╰─────────────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not fully instantiate ::FIFO #(
    T: type ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
),
    DEPTH: 3,
    READY_SLACK: 5,
)
      ╭─[ test.sus:1049:48 ]
      │
 1049 │     FIFO #(DEPTH: 3, READY_SLACK: 5, T: type int) f
      │                                                   ┬  
      │                                                   ╰── Could not fully instantiate ::FIFO #(
    T: type ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
),
    DEPTH: 3,
    READY_SLACK: 5,
)
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1053:35 ]
      │
 1053 │     interface start_iteration : bool do_start
      │                                      ────┬───  
      │                                          ╰───── Unused Variable: This variable does not affect the output ports of this module
──────╯
Error: Used 'if' in a non generative context, use 'when' instead
      ╭─[ test.sus:1064:2 ]
      │
 1064 │     if iter_valid {
      │     ─┬  
      │      ╰── Used 'if' in a non generative context, use 'when' instead
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
      ╭─[ test.sus:1070:2 ]
      │
 1070 │     int[20] arr
      │     ─────┬─────  
      │          ╰─────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1070:10 ]
      │
 1070 │     int[20] arr
      │             ─┬─  
      │              ╰─── Unused Variable: This variable does not affect the output ports of this module
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[5]
      ╭─[ test.sus:1072:2 ]
      │
 1072 │     int[5] subArr = Slice #(SIZE: 20, OUT_SIZE: 5, FROM: 3, T: type int)(arr)
      │     ──────┬──────  
      │           ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[5]
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1072:9 ]
      │
 1072 │     int[5] subArr = Slice #(SIZE: 20, OUT_SIZE: 5, FROM: 3, T: type int)(arr)
      │            ───┬──  
      │               ╰──── Unused Variable: This variable does not affect the output ports of this module
──────╯
Error: Could not fully instantiate ::Slice #(
    T: type ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
),
    SIZE: 20,
    OUT_SIZE: 5,
    FROM: 3,
)
      ╭─[ test.sus:1072:18 ]
      │
 1072 │     int[5] subArr = Slice #(SIZE: 20, OUT_SIZE: 5, FROM: 3, T: type int)(arr)
      │                     ──────────────────────────┬─────────────────────────  
      │                                               ╰─────────────────────────── Could not fully instantiate ::Slice #(
    T: type ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
),
    SIZE: 20,
    OUT_SIZE: 5,
    FROM: 3,
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
      ╭─[ test.sus:1072:18 ]
      │
 1072 │     int[5] subArr = Slice #(SIZE: 20, OUT_SIZE: 5, FROM: 3, T: type int)(arr)
      │                     ──────────────────────────┬─────────────────────────  
      │                                               ╰─────────────────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[20]
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[5]
      ╭─[ test.sus:1072:18 ]
      │
 1072 │     int[5] subArr = Slice #(SIZE: 20, OUT_SIZE: 5, FROM: 3, T: type int)(arr)
      │                     ──────────────────────────┬─────────────────────────  
      │                                               ╰─────────────────────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[5]
──────╯
Error: For executing compile-time constants, all arguments must be fully specified. In this case, the arguments 'T' were not specified
      ╭─[ test.sus:1077:25 ]
      │
 1077 │     gen int INT_ARR_SIZE = sizeof #(T: type int[10][10])
      │                            ──────────────┬──────────────  
      │                                          ╰──────────────── For executing compile-time constants, all arguments must be fully specified. In this case, the arguments 'T' were not specified
──────╯
Error: Assertion failed
      ╭─[ test.sus:1087:2 ]
      │
 1087 │     assert #(C: 15 + 3 == 19)
      │     ────────────┬────────────  
      │                 ╰────────────── Assertion failed
──────╯
Warning: Used 'when' in a generative context, use 'if' instead
      ╭─[ test.sus:1098:2 ]
      │
 1098 │     when WIDTH <= BASE_CASE_SIZE {
      │     ──┬─  
      │       ╰─── Used 'when' in a generative context, use 'if' instead
──────╯
Error: Used 'if' in a non generative context, use 'when' instead
      ╭─[ test.sus:1101:4 ]
      │
 1101 │          if bits[I] {
      │          ─┬  
      │           ╰── Used 'if' in a non generative context, use 'when' instead
──────╯
Error: Used 'if' in a non generative context, use 'when' instead
      ╭─[ test.sus:1103:11 ]
      │
 1103 │          } else if !bits[I] {
      │                 ─┬  
      │                  ╰── Used 'if' in a non generative context, use 'when' instead
──────╯
Warning: Used 'when' in a generative context, use 'if' instead
      ╭─[ test.sus:1108:9 ]
      │
 1108 │     } else when WIDTH > BASE_CASE_SIZE {
      │            ──┬─  
      │              ╰─── Used 'when' in a generative context, use 'if' instead
──────╯
Error: This port is not strongly connected to the strongly connected port cluster 'a', 'b'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
      ╭─[ test.sus:1114:21 ]
      │
 1113 │     interface x : bool a -> bool b
      │                        ┬         ┬  
      │                        ╰──────────── 'a' declared here
      │                                  │  
      │                                  ╰── 'b' declared here
 1114 │     interface y : bool c -> bool d
      │                        ┬  
      │                        ╰── This port is not strongly connected to the strongly connected port cluster 'a', 'b'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
──────╯
Error: This port is not strongly connected to the strongly connected port cluster 'a', 'b'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
      ╭─[ test.sus:1114:31 ]
      │
 1113 │     interface x : bool a -> bool b
      │                        ┬         ┬  
      │                        ╰──────────── 'a' declared here
      │                                  │  
      │                                  ╰── 'b' declared here
 1114 │     interface y : bool c -> bool d
      │                                  ┬  
      │                                  ╰── This port is not strongly connected to the strongly connected port cluster 'a', 'b'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
──────╯
Error: This port is not strongly connected to the strongly connected port cluster 'a', 'b'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
      ╭─[ test.sus:1124:21 ]
      │
 1123 │     interface x : bool a -> bool b
      │                        ┬         ┬  
      │                        ╰──────────── 'a' declared here
      │                                  │  
      │                                  ╰── 'b' declared here
 1124 │     interface y : bool c -> bool d
      │                        ┬  
      │                        ╰── This port is not strongly connected to the strongly connected port cluster 'a', 'b'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
──────╯
Error: This port is not strongly connected to the strongly connected port cluster 'a', 'b'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
      ╭─[ test.sus:1124:31 ]
      │
 1123 │     interface x : bool a -> bool b
      │                        ┬         ┬  
      │                        ╰──────────── 'a' declared here
      │                                  │  
      │                                  ╰── 'b' declared here
 1124 │     interface y : bool c -> bool d
      │                                  ┬  
      │                                  ╰── This port is not strongly connected to the strongly connected port cluster 'a', 'b'.
An input and output port are strongly connected if there is a direct dependency path from the input port to the output port.
Strongly connected ports are also transitive.
If you do not wish to change your design, then 'virtually' connect this port to the strongly connected cluster by explicitly annotating its absolute latency.
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1128:11 ]
      │
 1128 │     reg bool a_delayed = a
      │              ────┬────  
      │                  ╰────── Unused Variable: This variable does not affect the output ports of this module
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1130:7 ]
      │
 1130 │     bool out_shared = a_delayed ^ c
      │          ─────┬────  
      │               ╰────── Unused Variable: This variable does not affect the output ports of this module
──────╯
Error: Excess argument. Function takes 1 args, but 2 were passed.
      ╭─[ test.sus:1140:47 ]
      │
 1140 │     out_val = infer_me(in_val | (in_val_2 == 0), in_val_2)
      │                                                  ────┬───  
      │                                                      ╰───── Excess argument. Function takes 1 args, but 2 were passed.
      │ 
 1145 │     interface infer_me : bool x'0 -> bool y'A
      │               ────┬───  
      │                   ╰───── Interface 'infer_me' defined here
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1160:8 ]
      │
 1160 │     input int data_received'3
      │           ─────────┬─────────  
      │                    ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1160:12 ]
      │
 1160 │     input int data_received'3
      │               ──────┬──────  
      │                     ╰──────── Unused Variable: This variable does not affect the output ports of this module
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1162:2 ]
      │
 1162 │     FIFO #(DEPTH: 30) fifo
      │     ────────┬────────  
      │             ╰────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not fully instantiate ::FIFO #(
    T: type ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
),
    DEPTH: 30,
    READY_SLACK: /* Could not infer */
)
      ╭─[ test.sus:1162:20 ]
      │
 1162 │     FIFO #(DEPTH: 30) fifo
      │                       ──┬─  
      │                         ╰─── Could not fully instantiate ::FIFO #(
    T: type ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
),
    DEPTH: 30,
    READY_SLACK: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1166:23 ]
      │
 1166 │        reg reg reg reg reg int heavy_computation = data_received
      │                            ──────────┬──────────  
      │                                      ╰──────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1166:27 ]
      │
 1166 │        reg reg reg reg reg int heavy_computation = data_received
      │                                ────────┬────────  
      │                                        ╰────────── Unused Variable: This variable does not affect the output ports of this module
──────╯
Error: Could not fully instantiate ::infer_me #(
    A: /* Could not infer */
)
      ╭─[ test.sus:1187:11 ]
      │
 1187 │     infer_me x
      │              ┬  
      │              ╰── Could not fully instantiate ::infer_me #(
    A: /* Could not infer */
)
──────╯
Error: Could not fully instantiate ::infer_me #(
    A: /* Could not infer */
)
      ╭─[ test.sus:1188:11 ]
      │
 1188 │     infer_me y
      │              ┬  
      │              ╰── Could not fully instantiate ::infer_me #(
    A: /* Could not infer */
)
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1199:7 ]
      │
 1199 │     bool in_spec'0 = in_port
      │          ───┬───  
      │             ╰───── Unused Variable: This variable does not affect the output ports of this module
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[10][6][2]
      ╭─[ test.sus:1206:29 ]
      │
 1206 │     interface testArrayWrite : int[10][6][2] in_arr -> int[10][6] out_arr
      │                                ──────────┬─────────  
      │                                          ╰─────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[10][6][2]
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[10][6]
      ╭─[ test.sus:1206:53 ]
      │
 1206 │     interface testArrayWrite : int[10][6][2] in_arr -> int[10][6] out_arr
      │                                                        ─────────┬────────  
      │                                                                 ╰────────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[10][6]
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[10][6]
      ╭─[ test.sus:1208:12 ]
      │
 1208 │     out_arr = in_arr[0]
      │               ────┬────  
      │                   ╰────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[10][6]
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1210:18 ]
      │
 1210 │     out_arr[5][9] = in_arr[0][5][9]
      │                     ───────┬───────  
      │                            ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
      ╭─[ test.sus:1214:20 ]
      │
 1214 │          out_arr[j][i] = in_arr[0][j][i]
      │                          ───────┬───────  
      │                                 ╰───────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)
──────╯
Error: Could not fully instantiate ::infer_me_with_poison_output #(
    N: /* Could not infer */
)
      ╭─[ test.sus:1229:19 ]
      │
 1229 │     bool x, bool y = infer_me_with_poison_output(i)
      │                      ─────────────┬─────────────  
      │                                   ╰─────────────── Could not fully instantiate ::infer_me_with_poison_output #(
    N: /* Could not infer */
)
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1234:35 ]
      │
 1234 │     interface __add__ : int#(MAX: A) a'0, int #(MAX:B) b'0 -> int #(MAX: A+B) o'clog2 #(V: 5)
      │                                      ┬  
      │                                      ╰── Unused Variable: This variable does not affect the output ports of this module
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1234:53 ]
      │
 1234 │     interface __add__ : int#(MAX: A) a'0, int #(MAX:B) b'0 -> int #(MAX: A+B) o'clog2 #(V: 5)
      │                                                        ┬  
      │                                                        ╰── Unused Variable: This variable does not affect the output ports of this module
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1245:32 ]
      │
 1245 │ module MultiStateLoop #(T, int II) {
      │                                ─┬  
      │                                 ╰── Unused Variable: This variable does not affect the output ports of this module
──────╯
Error: No Global of the name 'trigger' was found. Did you forget to import it?
      ╭─[ test.sus:1246:2 ]
      │
 1246 │     trigger may_process'0 : T cur_state {
      │     ───┬───  
      │        ╰───── No Global of the name 'trigger' was found. Did you forget to import it?
──────╯
Error: Could not fully figure out the type of this object. type_variable_3[...peano_variable_3]
      ╭─[ test.sus:1246:10 ]
      │
 1246 │     trigger may_process'0 : T cur_state {
      │             ─────┬─────  
      │                  ╰─────── Could not fully figure out the type of this object. type_variable_3[...peano_variable_3]
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1246:10 ]
      │
 1246 │     trigger may_process'0 : T cur_state {
      │             ─────┬─────  
      │                  ╰─────── Unused Variable: This variable does not affect the output ports of this module
──────╯
Error: While parsing 'latency_specifier', parser found a syntax error in a node of type 'ERROR'
      ╭─[ test.sus:1246:22 ]
      │
 1246 │     trigger may_process'0 : T cur_state {
      │                        ───┬────┬───────  
      │                           ╰────────────── While parsing 'latency_specifier', parser found a syntax error in a node of type 'ERROR'
      │                                │         
      │                                ╰───────── Parent node 'latency_specifier'
──────╯
Error: No Global of the name 'cur_state' was found. Did you forget to import it?
      ╭─[ test.sus:1246:28 ]
      │
 1246 │     trigger may_process'0 : T cur_state {
      │                               ────┬────  
      │                                   ╰────── No Global of the name 'cur_state' was found. Did you forget to import it?
──────╯
Error: While parsing 'block', parser found a syntax error in a node of type 'ERROR'
      ╭─[ test.sus:1246:38 ]
      │
 1245 │ ╭─▶ module MultiStateLoop #(T, int II) {
 1246 │ │       trigger may_process'0 : T cur_state {
      │ │                                           ┬  
      │ │                                           ╰── While parsing 'block', parser found a syntax error in a node of type 'ERROR'
      ┆ ┆   
 1248 │ ├─▶     }
      │ │           
      │ ╰─────────── Parent node 'block'
──────╯
Error: No Global of the name 'action' was found. Did you forget to import it?
      ╭─[ test.sus:1247:3 ]
      │
 1247 │        action next_state'II : T next_state_value
      │        ───┬──  
      │           ╰──── No Global of the name 'action' was found. Did you forget to import it?
──────╯
Error: Could not fully figure out the type of this object. type_variable_5[...peano_variable_5]
      ╭─[ test.sus:1247:10 ]
      │
 1247 │        action next_state'II : T next_state_value
      │               ─────┬────  
      │                    ╰────── Could not fully figure out the type of this object. type_variable_5[...peano_variable_5]
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1247:10 ]
      │
 1247 │        action next_state'II : T next_state_value
      │               ─────┬────  
      │                    ╰────── Unused Variable: This variable does not affect the output ports of this module
──────╯
Error: While parsing 'block', parser found a syntax error in a node of type 'ERROR'
      ╭─[ test.sus:1247:24 ]
      │
 1245 │ ╭─▶ module MultiStateLoop #(T, int II) {
      ┆ ┆   
 1247 │ │          action next_state'II : T next_state_value
      │ │                               ──────────┬─────────  
      │ │                                         ╰─────────── While parsing 'block', parser found a syntax error in a node of type 'ERROR'
 1248 │ ├─▶     }
      │ │           
      │ ╰─────────── Parent node 'block'
──────╯
Error: While parsing 'source_file', parser found a syntax error in a node of type 'ERROR'
      ╭─[ test.sus:1250:2 ]
      │
    1 │ ╭─▶ 
      ┆ ┆   
 1250 │ │       action request_output : -> trigger output_valid : T result
      │ │       ─────────────────────────────┬────────────────────────────  
      │ │                                    ╰────────────────────────────── While parsing 'source_file', parser found a syntax error in a node of type 'ERROR'
      ┆ ┆   
 1365 │ ├─▶ 
      │ │      
      │ ╰────── Parent node 'source_file'
──────╯
Error: While parsing 'source_file', parser found a syntax error in a node of type 'ERROR'
      ╭─[ test.sus:1251:1 ]
      │
    1 │ ╭─▶ 
      ┆ ┆   
 1251 │ │   }
      │ │   ┬  
      │ │   ╰── While parsing 'source_file', parser found a syntax error in a node of type 'ERROR'
      ┆ ┆   
 1365 │ ├─▶ 
      │ │      
      │ ╰────── Parent node 'source_file'
──────╯
Error: Could not fully figure out the type of this object. type_variable_0[...peano_variable_0]
      ╭─[ test.sus:1254:2 ]
      │
 1254 │     MultiStateLoop loop
      │     ───────┬──────  
      │            ╰──────── Could not fully figure out the type of this object. type_variable_0[...peano_variable_0]
──────╯
Error: No Global of the name 'trigger' was found. Did you forget to import it?
      ╭─[ test.sus:1256:2 ]
      │
 1256 │     trigger request_input
      │     ───┬───  
      │        ╰───── No Global of the name 'trigger' was found. Did you forget to import it?
──────╯
Error: Could not fully figure out the type of this object. type_variable_2[...peano_variable_2]
      ╭─[ test.sus:1256:10 ]
      │
 1256 │     trigger request_input
      │             ──────┬──────  
      │                   ╰──────── Could not fully figure out the type of this object. type_variable_2[...peano_variable_2]
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1256:10 ]
      │
 1256 │     trigger request_input
      │             ──────┬──────  
      │                   ╰──────── Unused Variable: This variable does not affect the output ports of this module
──────╯
Error: No Global of the name 'action' was found. Did you forget to import it?
      ╭─[ test.sus:1257:3 ]
      │
 1257 │        action input_valid : float new_input
      │        ───┬──  
      │           ╰──── No Global of the name 'action' was found. Did you forget to import it?
──────╯
Error: Could not fully figure out the type of this object. type_variable_3[...peano_variable_3]
      ╭─[ test.sus:1257:10 ]
      │
 1257 │        action input_valid : float new_input
      │               ─────┬─────  
      │                    ╰─────── Could not fully figure out the type of this object. type_variable_3[...peano_variable_3]
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1257:10 ]
      │
 1257 │        action input_valid : float new_input
      │               ─────┬─────  
      │                    ╰─────── Unused Variable: This variable does not affect the output ports of this module
──────╯
Error: While parsing 'block', parser found a syntax error in a node of type 'ERROR'
      ╭─[ test.sus:1257:22 ]
      │
 1253 │ ╭─▶ module use_MultiStateLoop {
      ┆ ┆   
 1257 │ │          action input_valid : float new_input
      │ │                             ────────┬────────  
      │ │                                     ╰────────── While parsing 'block', parser found a syntax error in a node of type 'ERROR'
      ┆ ┆   
 1269 │ ├─▶ }
      │ │       
      │ ╰─────── Parent node 'block'
──────╯
Error: While parsing 'block', parser found a syntax error in a node of type 'ERROR'
      ╭─[ test.sus:1259:2 ]
      │
 1253 │ ╭─▶ module use_MultiStateLoop {
      ┆ ┆   
 1259 │ │       action request_result : -> trigger result_valid : {
      │ │       ────────────────────────┬────────────────────────  
      │ │                               ╰────────────────────────── While parsing 'block', parser found a syntax error in a node of type 'ERROR'
      ┆ ┆   
 1269 │ ├─▶ }
      │ │       
      │ ╰─────── Parent node 'block'
──────╯
Warning: Used 'when' in a generative context, use 'if' instead
      ╭─[ test.sus:1263:2 ]
      │
 1263 │     when loop.process : float cur_state {
      │     ──┬─  
      │       ╰─── Used 'when' in a generative context, use 'if' instead
──────╯
Error: There is no port or interface of name 'process' on module MultiStateLoop
      ╭─[ test.sus:1263:12 ]
      │
 1245 │ module MultiStateLoop #(T, int II) {
      │        ───────┬──────  
      │               ╰──────── Module 'MultiStateLoop' defined here. module ::MultiStateLoop #(T, int II):
domain clk:

      │ 
 1263 │     when loop.process : float cur_state {
      │               ───┬───  
      │                  ╰───── There is no port or interface of name 'process' on module MultiStateLoop
──────╯
Error: While parsing 'if_statement', parser found a syntax error in a node of type 'ERROR'
      ╭─[ test.sus:1263:20 ]
      │
 1263 │ ╭─▶     when loop.process : float cur_state {
      │ │                         ────────┬────────  
      │ │                                 ╰────────── While parsing 'if_statement', parser found a syntax error in a node of type 'ERROR'
      ┆ ┆   
 1268 │ ├─▶     }
      │ │           
      │ ╰─────────── Parent node 'if_statement'
──────╯
Error: Typing Error: variable reference expects a ::float but was given a ::int
      ╭─[ test.sus:1264:3 ]
      │
 1264 │        float next_state = cur_state * cur_state
      │        ────────┬───────  
      │                ╰───────── Typing Error: variable reference expects a ::float but was given a ::int
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1264:9 ]
      │
 1264 │        float next_state = cur_state * cur_state
      │              ─────┬────  
      │                   ╰────── Unused Variable: This variable does not affect the output ports of this module
──────╯
Error: No Global of the name 'cur_state' was found. Did you forget to import it?
      ╭─[ test.sus:1264:22 ]
      │
 1264 │        float next_state = cur_state * cur_state
      │                           ────┬────  
      │                               ╰────── No Global of the name 'cur_state' was found. Did you forget to import it?
──────╯
Error: No Global of the name 'cur_state' was found. Did you forget to import it?
      ╭─[ test.sus:1264:34 ]
      │
 1264 │        float next_state = cur_state * cur_state
      │                                       ────┬────  
      │                                           ╰────── No Global of the name 'cur_state' was found. Did you forget to import it?
──────╯
Warning: Used 'when' in a generative context, use 'if' instead
      ╭─[ test.sus:1265:3 ]
      │
 1265 │        when cur_state >= 2.0 {
      │        ──┬─  
      │          ╰─── Used 'when' in a generative context, use 'if' instead
──────╯
Error: No Global of the name 'cur_state' was found. Did you forget to import it?
      ╭─[ test.sus:1265:8 ]
      │
 1265 │        when cur_state >= 2.0 {
      │             ────┬────  
      │                 ╰────── No Global of the name 'cur_state' was found. Did you forget to import it?
──────╯
Error: While parsing 'if_statement', parser found a syntax error in a node of type 'ERROR'
      ╭─[ test.sus:1265:22 ]
      │
 1265 │ ╭─▶        when cur_state >= 2.0 {
      │ │                             ─┬  
      │ │                              ╰── While parsing 'if_statement', parser found a syntax error in a node of type 'ERROR'
      ┆ ┆   
 1267 │ ├─▶        }
      │ │              
      │ ╰────────────── Parent node 'if_statement'
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1272:6 ]
      │
 1272 │     int a = 3
      │         ┬  
      │         ╰── Unused Variable: This variable does not affect the output ports of this module
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1273:6 ]
      │
 1273 │     int b = 4
      │         ┬  
      │         ╰── Unused Variable: This variable does not affect the output ports of this module
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[4]
      ╭─[ test.sus:1275:2 ]
      │
 1275 │     int[4] result = []
      │     ──────┬──────  
      │           ╰──────── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[4]
──────╯
Error: Typing Error: write wire access expects a ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[0] but was given a ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[4]
      ╭─[ test.sus:1275:2 ]
      │
 1275 │     int[4] result = []
      │     ──────┬──────  
      │           ╰──────── Typing Error: write wire access expects a ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[0] but was given a ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[4]
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1275:9 ]
      │
 1275 │     int[4] result = []
      │            ───┬──  
      │               ╰──── Unused Variable: This variable does not affect the output ports of this module
──────╯
Error: Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[0]
      ╭─[ test.sus:1275:18 ]
      │
 1275 │     int[4] result = []
      │                     ─┬  
      │                      ╰── Could not finalize this type, some parameters were still unknown: ::int #(
    MIN: /* Could not infer */
    MAX: /* Could not infer */
)[0]
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1278:29 ]
      │
 1278 │ module unknownLatency #(int V) {
      │                             ┬  
      │                             ╰── Unused Variable: This variable does not affect the output ports of this module
──────╯
Error: Could not fully instantiate ::unknownLatency #(
    V: /* Could not infer */
)
      ╭─[ test.sus:1288:17 ]
      │
 1288 │     unknownLatency ulat
      │                    ──┬─  
      │                      ╰─── Could not fully instantiate ::unknownLatency #(
    V: /* Could not infer */
)
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1294:20 ]
      │
 1294 │     interface a: bool x'0 -> bool y'V
      │                       ┬  
      │                       ╰── Unused Variable: This variable does not affect the output ports of this module
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1296:20 ]
      │
 1296 │     interface b: bool p'0 -> bool q'-V
      │                       ┬  
      │                       ╰── Unused Variable: This variable does not affect the output ports of this module
──────╯
Error: Could not fully instantiate ::infer_me_conflicting_directions #(
    V: /* Could not infer */
)
      ╭─[ test.sus:1302:34 ]
      │
 1302 │     infer_me_conflicting_directions inf
      │                                     ─┬─  
      │                                      ╰─── Could not fully instantiate ::infer_me_conflicting_directions #(
    V: /* Could not infer */
)
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1309:20 ]
      │
 1309 │     interface a: bool x'0 -> bool y'V
      │                       ┬  
      │                       ╰── Unused Variable: This variable does not affect the output ports of this module
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1311:20 ]
      │
 1311 │     interface b: bool p'0 -> bool q'V+30
      │                       ┬  
      │                       ╰── Unused Variable: This variable does not affect the output ports of this module
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1324:20 ]
      │
 1324 │     interface a: bool x'0 -> bool y'-V
      │                       ┬  
      │                       ╰── Unused Variable: This variable does not affect the output ports of this module
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1326:20 ]
      │
 1326 │     interface b: bool p'0 -> bool q'-V+30
      │                       ┬  
      │                       ╰── Unused Variable: This variable does not affect the output ports of this module
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1338:35 ]
      │
 1338 │ module infer_me_inputs_only #(int V) {
      │                                   ┬  
      │                                   ╰── Unused Variable: This variable does not affect the output ports of this module
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1339:40 ]
      │
 1339 │     interface infer_me_inputs_only : bool a'0, bool b'V
      │                                           ┬  
      │                                           ╰── Unused Variable: This variable does not affect the output ports of this module
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1339:50 ]
      │
 1339 │     interface infer_me_inputs_only : bool a'0, bool b'V
      │                                                     ┬  
      │                                                     ╰── Unused Variable: This variable does not affect the output ports of this module
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1343:44 ]
      │
 1343 │     interface use_infer_me_inputs_only : bool x'0
      │                                               ┬  
      │                                               ╰── Unused Variable: This variable does not affect the output ports of this module
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1346:19 ]
      │
 1346 │     reg reg reg bool y = x
      │                      ┬  
      │                      ╰── Unused Variable: This variable does not affect the output ports of this module
──────╯
Error: Could not fully instantiate ::infer_me_inputs_only #(
    V: /* Could not infer */
)
      ╭─[ test.sus:1348:2 ]
      │
 1348 │     infer_me_inputs_only(x, y)
      │     ──────────┬─────────  
      │               ╰─────────── Could not fully instantiate ::infer_me_inputs_only #(
    V: /* Could not infer */
)
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1353:14 ]
      │
 1353 │     gen int[15] v = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
      │                 ┬  
      │                 ╰── Unused Variable: This variable does not affect the output ports of this module
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1355:14 ]
      │
 1355 │     gen int[15] vv = v + v
      │                 ─┬  
      │                  ╰── Unused Variable: This variable does not affect the output ports of this module
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1357:14 ]
      │
 1357 │     gen int[16] vvv = [1, 2, 4, 8, 1, 2, 4, 8, 1, 2, 4, 8, 1, 2, 4, 6]
      │                 ─┬─  
      │                  ╰─── Unused Variable: This variable does not affect the output ports of this module
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1359:13 ]
      │
 1359 │     gen int[3] qzd = vv + vvv
      │                ─┬─  
      │                 ╰─── Unused Variable: This variable does not affect the output ports of this module
──────╯
Error: Higher Rank array operation's arrays don't match in size: 15, 16
      ╭─[ test.sus:1359:19 ]
      │
 1359 │     gen int[3] qzd = vv + vvv
      │                      ────┬───  
      │                          ╰───── Higher Rank array operation's arrays don't match in size: 15, 16
──────╯
Warning: Unused Variable: This variable does not affect the output ports of this module
      ╭─[ test.sus:1361:16 ]
      │
 1361 │     state int[15] wire_v
      │                   ───┬──  
      │                      ╰──── Unused Variable: This variable does not affect the output ports of this module
──────╯
