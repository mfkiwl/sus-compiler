

extern module RawROM #(int WIDTH, int DEPTH) {
    assert#(C: WIDTH >= 0)
    assert#(C: DEPTH >= 0)

    domain clk
    action read'0 : int #(FROM: 0, TO: DEPTH) index'0 -> bool[WIDTH] output_bits'2 {}
}

module ROM #(T, int DEPTH) {
    RawROM#(WIDTH: sizeof #(T), DEPTH) rom
    action ROM : int #(FROM: 0, TO: DEPTH) index -> T output_data {
        bool[sizeof #(T)] out_bits = rom.read(index)

        output_data = transmute_from_bits #(T) (out_bits)
    }
}

extern module RawRAM #(int WIDTH, int DEPTH) {
    assert#(C: WIDTH >= 0)
    assert#(C: DEPTH >= 0)

    domain clk

    domain write_dom
    action write'0 : int#(FROM: 0, TO: DEPTH) addra'0, bool[WIDTH] dina'0 {}
    domain read_dom
    action read'0 : int#(FROM: 0, TO: DEPTH) addrb'0 -> bool[WIDTH] doutb'2 {}
}

module RAM #(T, int DEPTH) {
    domain clk

    gen int WIDTH = sizeof#(T)

    RawRAM#(WIDTH, DEPTH) ram

    domain write_dom
    action write'0 : int#(FROM: 0, TO: DEPTH) addra'0, T dina'0 {
        bool[WIDTH] din = transmute_to_bits(dina)
        ram.write(addra, din)
    }
    domain read_dom
    action read : int#(FROM: 0, TO: DEPTH) addrb -> T doutb {
        bool[WIDTH] dout = ram.read(addrb)
        doutb = transmute_from_bits(dout)
    }
}

extern module RawFIFO #(int WIDTH, int DEPTH, int MAY_PUSH_LATENCY, int EXTRA_IN_FLIGHT, int READ_DATA_LATENCY) {
    assert#(C: WIDTH >= 0)
    assert#(C: DEPTH >= 0)
    assert#(C: MAY_PUSH_LATENCY >= 0)
    assert#(C: EXTRA_IN_FLIGHT >= 0)
    assert#(C: READ_DATA_LATENCY >= 0)
    assert#(C: MAY_PUSH_LATENCY + EXTRA_IN_FLIGHT <= DEPTH - 2)

    domain clk
    action rst'0 {}

    domain write
    output bool may_push'-MAY_PUSH_LATENCY
    action push'0 : bool[WIDTH] push_data'0 {}
    
    domain read
    output bool may_pop'0
    action pop'0 : -> bool[WIDTH] pop_data'READ_DATA_LATENCY {}
}

module FIFO #(T, int DEPTH, int MAY_PUSH_LATENCY, int EXTRA_IN_FLIGHT) {
    RawFIFO#(DEPTH, MAY_PUSH_LATENCY, EXTRA_IN_FLIGHT, READ_DATA_LATENCY: 2) fifo
    domain clk
    action rst {
        fifo.rst()
    }

    domain write
    output bool may_push'-MAY_PUSH_LATENCY = fifo.may_push
    action push'0 : T push_data'0 {
        bool[sizeof#(T)] as_bits = transmute_to_bits(push_data)
        fifo.push(as_bits)
    }
    
    domain read
    output bool may_pop'0 = fifo.may_pop
    action pop'0 : -> T pop_data'2 {
        bool[sizeof#(T)] pop_data_as_bits = fifo.pop()
        pop_data = transmute_from_bits(pop_data_as_bits)
    }
}

module SameCycleReadFIFO #(T, int DEPTH, int MAY_PUSH_LATENCY, int EXTRA_IN_FLIGHT) {
    RawFIFO#(DEPTH, MAY_PUSH_LATENCY, EXTRA_IN_FLIGHT, READ_DATA_LATENCY: 0) fifo
    domain clk
    action rst {
        fifo.rst()
    }

    domain write
    output bool may_push'-MAY_PUSH_LATENCY = fifo.may_push
    action push'0 : T push_data'0 {
        bool[sizeof#(T)] as_bits = transmute_to_bits(push_data)
        fifo.push(as_bits)
    }
    
    domain read
    output bool may_pop'0 = fifo.may_pop
    action pop'0 : -> T pop_data'0 {
        bool[sizeof#(T)] pop_data_as_bits = fifo.pop()
        pop_data = transmute_from_bits(pop_data_as_bits)
    }
}
