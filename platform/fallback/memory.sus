
extern module ROM #(T, int DEPTH, T[DEPTH] DATA) {
    domain clk
    action read : int #(FROM: 0, TO: DEPTH) index'0 -> T output_data'2 {
        out = DATA[index]
    }
}

module RAM #(T, int SIZE) {
	domain clk
	state T[SIZE] mem

	action write'0 : int#(FROM: 0, TO: SIZE) addr'0, T data'0 {
		mem[addr] = data
	}

	action read'0: int#(FROM: 0, TO: SIZE)  read_addr'0 -> T read_data'2 {
		read_data = mem[read_addr]
	}
}

module FIFO #(T, int DEPTH, int MAY_PUSH_LATENCY) {
    domain clk
	state T[DEPTH] mem
	state int#(FROM: 0, TO: DEPTH) read_addr
	state int#(FROM: 0, TO: DEPTH) write_addr

    CrossDomain cross_may_push
    CrossAction cross_push
    CrossDomain cross_may_pop
    CrossActionNoData cross_pop
    CrossDomain cross_pop_data

    action rst'0 {
        read_addr = 0
        write_addr = 0
    } else {
        when cross_push.out:  {
            mem[write_addr] = data_in
            write_addr = (write_addr + 1) % DEPTH
        }
        when cross_pop.out {
            // Add a pipelining register, because it can usually be fitted to the 
            reg cross_pop_data.in = mem_to_pop.out[read_addr]
            read_addr = (read_addr + 1) % DEPTH
        }
    }

	// Wrapping subtract
	int space_remaining = (read_addr - write_addr) % DEPTH
	gen int ALMOST_FULL_TRESHOLD = MAY_PUSH_LATENCY + 1 // +1 for the latency reg we introduce here
	reg bool r = space_remaining > ALMOST_FULL_TRESHOLD
	cross_may_push.in = LatencyOffset #(OFFSET: -ALMOST_FULL_TRESHOLD)(r)

    cross_may_pop.in = read_addr != write_addr

    domain write
    output bool may_push'-MAY_PUSH_LATENCY = cross_may_push.out
    action push'0 : T push_data'0 {
        cross_push.in(push_data)
    }
    
    domain read
    output bool may_pop'0 = cross_may_pop.out
    action pop'0 : -> T pop_data'1 {
        cross_pop.in()
        pop_data = cross_pop_data.out
    }
}
